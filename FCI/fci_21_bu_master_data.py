# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'fci_21_bu_configdata.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.Qt import QTableWidgetItem
import sqlite3

class fci_21_Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1368, 768)
        MainWindow.setBaseSize(QtCore.QSize(0, 0))
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.frame = QtWidgets.QFrame(self.centralwidget)
        self.frame.setGeometry(QtCore.QRect(20, 10, 1341, 711))
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.groupBox = QtWidgets.QGroupBox(self.frame)
        self.groupBox.setGeometry(QtCore.QRect(20, 30, 851, 271))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.groupBox.setFont(font)
        self.groupBox.setObjectName("groupBox")
        self.tableWidget = QtWidgets.QTableWidget(self.groupBox)
        self.tableWidget.setGeometry(QtCore.QRect(20, 30, 311, 211))
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(3)
        self.tableWidget.setRowCount(1)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setVerticalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(10)
        item.setFont(font)
        self.tableWidget.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(10)
        item.setFont(font)
        self.tableWidget.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(10)
        item.setFont(font)
        self.tableWidget.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        item.setFont(font)
        self.tableWidget.setItem(0, 0, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        item.setFont(font)
        self.tableWidget.setItem(0, 1, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(10)
        item.setFont(font)
        self.tableWidget.setItem(0, 2, item)
        self.pushButton = QtWidgets.QPushButton(self.groupBox)
        self.pushButton.setGeometry(QtCore.QRect(360, 210, 81, 31))
        self.pushButton.setObjectName("pushButton")
        self.pushButton_2 = QtWidgets.QPushButton(self.groupBox)
        self.pushButton_2.setGeometry(QtCore.QRect(470, 210, 75, 31))
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_3 = QtWidgets.QPushButton(self.groupBox)
        self.pushButton_3.setGeometry(QtCore.QRect(580, 210, 75, 31))
        self.pushButton_3.setObjectName("pushButton_3")
        self.pushButton_4 = QtWidgets.QPushButton(self.groupBox)
        self.pushButton_4.setGeometry(QtCore.QRect(690, 210, 75, 31))
        self.pushButton_4.setObjectName("pushButton_4")
        self.label_22 = QtWidgets.QLabel(self.groupBox)
        self.label_22.setGeometry(QtCore.QRect(360, 40, 91, 31))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        font.setBold(True)
        font.setUnderline(False)
        font.setWeight(75)
        self.label_22.setFont(font)
        self.label_22.setStyleSheet("color: rgb(0, 0, 255);")
        self.label_22.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_22.setObjectName("label_22")
        self.lineEdit_12 = QtWidgets.QLineEdit(self.groupBox)
        self.lineEdit_12.setGeometry(QtCore.QRect(490, 30, 101, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.lineEdit_12.setFont(font)
        self.lineEdit_12.setText("")
        self.lineEdit_12.setReadOnly(True)
        self.lineEdit_12.setObjectName("lineEdit_12")
        self.lineEdit_13 = QtWidgets.QLineEdit(self.groupBox)
        self.lineEdit_13.setGeometry(QtCore.QRect(490, 90, 191, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.lineEdit_13.setFont(font)
        self.lineEdit_13.setText("")
        self.lineEdit_13.setObjectName("lineEdit_13")
        self.label_23 = QtWidgets.QLabel(self.groupBox)
        self.label_23.setGeometry(QtCore.QRect(350, 90, 111, 31))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        font.setBold(True)
        font.setUnderline(False)
        font.setWeight(75)
        self.label_23.setFont(font)
        self.label_23.setStyleSheet("color: rgb(0, 0, 255);")
        self.label_23.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_23.setObjectName("label_23")
        self.label_24 = QtWidgets.QLabel(self.groupBox)
        self.label_24.setGeometry(QtCore.QRect(360, 150, 111, 31))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        font.setBold(True)
        font.setUnderline(False)
        font.setWeight(75)
        self.label_24.setFont(font)
        self.label_24.setStyleSheet("color: rgb(0, 0, 255);")
        self.label_24.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_24.setObjectName("label_24")
        self.lineEdit_14 = QtWidgets.QLineEdit(self.groupBox)
        self.lineEdit_14.setGeometry(QtCore.QRect(490, 150, 191, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.lineEdit_14.setFont(font)
        self.lineEdit_14.setText("")
        self.lineEdit_14.setObjectName("lineEdit_14")
        self.groupBox_3 = QtWidgets.QGroupBox(self.frame)
        self.groupBox_3.setGeometry(QtCore.QRect(10, 330, 891, 371))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.groupBox_3.setFont(font)
        self.groupBox_3.setObjectName("groupBox_3")
        self.tableWidget_2 = QtWidgets.QTableWidget(self.groupBox_3)
        self.tableWidget_2.setGeometry(QtCore.QRect(10, 40, 421, 311))
        self.tableWidget_2.setObjectName("tableWidget_2")
        self.tableWidget_2.setColumnCount(4)
        self.tableWidget_2.setRowCount(1)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_2.setVerticalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(10)
        item.setFont(font)
        self.tableWidget_2.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(10)
        item.setFont(font)
        self.tableWidget_2.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(10)
        item.setFont(font)
        self.tableWidget_2.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_2.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        item.setFont(font)
        self.tableWidget_2.setItem(0, 0, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        item.setFont(font)
        self.tableWidget_2.setItem(0, 1, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(10)
        item.setFont(font)
        self.tableWidget_2.setItem(0, 2, item)
        self.label_25 = QtWidgets.QLabel(self.groupBox_3)
        self.label_25.setGeometry(QtCore.QRect(470, 50, 91, 31))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        font.setBold(True)
        font.setUnderline(False)
        font.setWeight(75)
        self.label_25.setFont(font)
        self.label_25.setStyleSheet("color: rgb(0, 0, 255);")
        self.label_25.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_25.setObjectName("label_25")
        self.lineEdit_15 = QtWidgets.QLineEdit(self.groupBox_3)
        self.lineEdit_15.setGeometry(QtCore.QRect(630, 50, 101, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.lineEdit_15.setFont(font)
        self.lineEdit_15.setText("")
        self.lineEdit_15.setReadOnly(True)
        self.lineEdit_15.setObjectName("lineEdit_15")
        self.lineEdit_16 = QtWidgets.QLineEdit(self.groupBox_3)
        self.lineEdit_16.setGeometry(QtCore.QRect(630, 110, 191, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.lineEdit_16.setFont(font)
        self.lineEdit_16.setText("")
        self.lineEdit_16.setObjectName("lineEdit_16")
        self.lineEdit_18 = QtWidgets.QLineEdit(self.groupBox_3)
        self.lineEdit_18.setGeometry(QtCore.QRect(630, 270, 211, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.lineEdit_18.setFont(font)
        self.lineEdit_18.setText("")
        self.lineEdit_18.setObjectName("lineEdit_18")
        self.label_26 = QtWidgets.QLabel(self.groupBox_3)
        self.label_26.setGeometry(QtCore.QRect(470, 100, 131, 41))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        font.setBold(True)
        font.setUnderline(False)
        font.setWeight(75)
        self.label_26.setFont(font)
        self.label_26.setStyleSheet("color: rgb(0, 0, 255);")
        self.label_26.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_26.setObjectName("label_26")
        self.label_27 = QtWidgets.QLabel(self.groupBox_3)
        self.label_27.setGeometry(QtCore.QRect(470, 170, 131, 31))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        font.setBold(True)
        font.setUnderline(False)
        font.setWeight(75)
        self.label_27.setFont(font)
        self.label_27.setStyleSheet("color: rgb(0, 0, 255);")
        self.label_27.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_27.setObjectName("label_27")
        self.pushButton_5 = QtWidgets.QPushButton(self.groupBox_3)
        self.pushButton_5.setGeometry(QtCore.QRect(460, 330, 81, 31))
        self.pushButton_5.setObjectName("pushButton_5")
        self.pushButton_6 = QtWidgets.QPushButton(self.groupBox_3)
        self.pushButton_6.setGeometry(QtCore.QRect(570, 330, 75, 31))
        self.pushButton_6.setObjectName("pushButton_6")
        self.pushButton_7 = QtWidgets.QPushButton(self.groupBox_3)
        self.pushButton_7.setGeometry(QtCore.QRect(670, 330, 75, 31))
        self.pushButton_7.setObjectName("pushButton_7")
        self.pushButton_8 = QtWidgets.QPushButton(self.groupBox_3)
        self.pushButton_8.setGeometry(QtCore.QRect(770, 330, 75, 31))
        self.pushButton_8.setObjectName("pushButton_8")
        self.label_28 = QtWidgets.QLabel(self.groupBox_3)
        self.label_28.setGeometry(QtCore.QRect(470, 270, 101, 31))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        font.setBold(True)
        font.setUnderline(False)
        font.setWeight(75)
        self.label_28.setFont(font)
        self.label_28.setStyleSheet("color: rgb(0, 0, 255);")
        self.label_28.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_28.setObjectName("label_28")
        self.textEdit = QtWidgets.QTextEdit(self.groupBox_3)
        self.textEdit.setGeometry(QtCore.QRect(630, 170, 211, 71))
        self.textEdit.setObjectName("textEdit")
        self.pushButton_9 = QtWidgets.QPushButton(self.frame)
        self.pushButton_9.setGeometry(QtCore.QRect(1050, 10, 91, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.pushButton_9.setFont(font)
        self.pushButton_9.setObjectName("pushButton_9")
        self.label_47 = QtWidgets.QLabel(self.frame)
        self.label_47.setGeometry(QtCore.QRect(1160, 10, 171, 31))
        font = QtGui.QFont()
        font.setFamily("MS Sans Serif")
        font.setPointSize(10)
        font.setBold(True)
        font.setUnderline(False)
        font.setWeight(75)
        self.label_47.setFont(font)
        self.label_47.setStyleSheet("color: rgb(170, 0, 255);")
        self.label_47.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_47.setObjectName("label_47")
        self.label = QtWidgets.QLabel(self.frame)
        self.label.setGeometry(QtCore.QRect(920, 60, 331, 21))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label.setFont(font)
        self.label.setStyleSheet("color: rgb(0, 170, 0);")
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.frame)
        self.label_2.setGeometry(QtCore.QRect(920, 100, 331, 21))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label_2.setFont(font)
        self.label_2.setStyleSheet("color: rgb(255, 0, 0);")
        self.label_2.setObjectName("label_2")
        self.groupBox_2 = QtWidgets.QGroupBox(self.frame)
        self.groupBox_2.setGeometry(QtCore.QRect(910, 150, 391, 551))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.groupBox_2.setFont(font)
        self.groupBox_2.setObjectName("groupBox_2")
        self.pushButton_14 = QtWidgets.QPushButton(self.groupBox_2)
        self.pushButton_14.setGeometry(QtCore.QRect(20, 200, 61, 31))
        self.pushButton_14.setObjectName("pushButton_14")
        self.pushButton_15 = QtWidgets.QPushButton(self.groupBox_2)
        self.pushButton_15.setGeometry(QtCore.QRect(110, 200, 75, 31))
        self.pushButton_15.setObjectName("pushButton_15")
        self.pushButton_16 = QtWidgets.QPushButton(self.groupBox_2)
        self.pushButton_16.setGeometry(QtCore.QRect(210, 200, 75, 31))
        self.pushButton_16.setObjectName("pushButton_16")
        self.pushButton_17 = QtWidgets.QPushButton(self.groupBox_2)
        self.pushButton_17.setGeometry(QtCore.QRect(300, 200, 61, 31))
        self.pushButton_17.setObjectName("pushButton_17")
        self.label_32 = QtWidgets.QLabel(self.groupBox_2)
        self.label_32.setGeometry(QtCore.QRect(20, 50, 91, 31))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        font.setBold(True)
        font.setUnderline(False)
        font.setWeight(75)
        self.label_32.setFont(font)
        self.label_32.setStyleSheet("color: rgb(0, 0, 255);")
        self.label_32.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_32.setObjectName("label_32")
        self.lineEdit_21 = QtWidgets.QLineEdit(self.groupBox_2)
        self.lineEdit_21.setGeometry(QtCore.QRect(160, 50, 101, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.lineEdit_21.setFont(font)
        self.lineEdit_21.setText("")
        self.lineEdit_21.setReadOnly(True)
        self.lineEdit_21.setObjectName("lineEdit_21")
        self.lineEdit_22 = QtWidgets.QLineEdit(self.groupBox_2)
        self.lineEdit_22.setGeometry(QtCore.QRect(160, 100, 191, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.lineEdit_22.setFont(font)
        self.lineEdit_22.setText("")
        self.lineEdit_22.setObjectName("lineEdit_22")
        self.label_33 = QtWidgets.QLabel(self.groupBox_2)
        self.label_33.setGeometry(QtCore.QRect(20, 100, 111, 31))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        font.setBold(True)
        font.setUnderline(False)
        font.setWeight(75)
        self.label_33.setFont(font)
        self.label_33.setStyleSheet("color: rgb(0, 0, 255);")
        self.label_33.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_33.setObjectName("label_33")
        self.label_34 = QtWidgets.QLabel(self.groupBox_2)
        self.label_34.setGeometry(QtCore.QRect(20, 150, 111, 31))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        font.setBold(True)
        font.setUnderline(False)
        font.setWeight(75)
        self.label_34.setFont(font)
        self.label_34.setStyleSheet("color: rgb(0, 0, 255);")
        self.label_34.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_34.setObjectName("label_34")
        self.lineEdit_23 = QtWidgets.QLineEdit(self.groupBox_2)
        self.lineEdit_23.setGeometry(QtCore.QRect(160, 150, 191, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.lineEdit_23.setFont(font)
        self.lineEdit_23.setText("")
        self.lineEdit_23.setObjectName("lineEdit_23")
        self.tableWidget_4 = QtWidgets.QTableWidget(self.groupBox_2)
        self.tableWidget_4.setGeometry(QtCore.QRect(20, 260, 351, 271))
        self.tableWidget_4.setObjectName("tableWidget_4")
        self.tableWidget_4.setColumnCount(3)
        self.tableWidget_4.setRowCount(1)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_4.setVerticalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(10)
        item.setFont(font)
        self.tableWidget_4.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(10)
        item.setFont(font)
        self.tableWidget_4.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(10)
        item.setFont(font)
        self.tableWidget_4.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        item.setFont(font)
        self.tableWidget_4.setItem(0, 0, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        item.setFont(font)
        self.tableWidget_4.setItem(0, 1, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(10)
        item.setFont(font)
        self.tableWidget_4.setItem(0, 2, item)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1368, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.groupBox.setTitle(_translate("MainWindow", "Materials Category"))
        item = self.tableWidget.verticalHeaderItem(0)
        item.setText(_translate("MainWindow", "1"))
        item = self.tableWidget.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "Material ID"))
        item = self.tableWidget.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "Material Name"))
        item = self.tableWidget.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "Ranking"))
        __sortingEnabled = self.tableWidget.isSortingEnabled()
        self.tableWidget.setSortingEnabled(False)
        self.tableWidget.setSortingEnabled(__sortingEnabled)
        self.pushButton.setText(_translate("MainWindow", "Add"))
        self.pushButton_2.setText(_translate("MainWindow", "Save"))
        self.pushButton_3.setText(_translate("MainWindow", "Delete"))
        self.pushButton_4.setText(_translate("MainWindow", "Reset"))
        self.label_22.setText(_translate("MainWindow", "Material ID :"))
        self.label_23.setText(_translate("MainWindow", "Material Name :"))
        self.label_24.setText(_translate("MainWindow", "Ranking :"))
        self.groupBox_3.setTitle(_translate("MainWindow", "Contractors"))
        item = self.tableWidget_2.verticalHeaderItem(0)
        item.setText(_translate("MainWindow", "1"))
        item = self.tableWidget_2.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "Contractor ID"))
        item = self.tableWidget_2.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "Contractor Name"))
        item = self.tableWidget_2.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "Adress"))
        item = self.tableWidget_2.horizontalHeaderItem(3)
        item.setText(_translate("MainWindow", "Contact No."))
        __sortingEnabled = self.tableWidget_2.isSortingEnabled()
        self.tableWidget_2.setSortingEnabled(False)
        self.tableWidget_2.setSortingEnabled(__sortingEnabled)
        self.label_25.setText(_translate("MainWindow", "Contract ID :"))
        self.label_26.setText(_translate("MainWindow", "Contractor Name :"))
        self.label_27.setText(_translate("MainWindow", "Contractor Address:"))
        self.pushButton_5.setText(_translate("MainWindow", "Add"))
        self.pushButton_6.setText(_translate("MainWindow", "Save"))
        self.pushButton_7.setText(_translate("MainWindow", "Delete"))
        self.pushButton_8.setText(_translate("MainWindow", "Reset"))
        self.label_28.setText(_translate("MainWindow", "Contact :"))
        self.pushButton_9.setText(_translate("MainWindow", "Return"))
        self.label_47.setText(_translate("MainWindow", "05 Aug 2020 14:23:00"))
        self.label.setText(_translate("MainWindow", "Note: Double click on the record to Edit Or Delete Record."))
        self.label_2.setText(_translate("MainWindow", "Material Category: Successfully Saved."))
        self.groupBox_2.setTitle(_translate("MainWindow", "Storage Details"))
        self.pushButton_14.setText(_translate("MainWindow", "Add"))
        self.pushButton_15.setText(_translate("MainWindow", "Save"))
        self.pushButton_16.setText(_translate("MainWindow", "Delete"))
        self.pushButton_17.setText(_translate("MainWindow", "Reset"))
        self.label_32.setText(_translate("MainWindow", "Storagel ID:"))
        self.label_33.setText(_translate("MainWindow", "Name:"))
        self.label_34.setText(_translate("MainWindow", "Address:"))
        item = self.tableWidget_4.verticalHeaderItem(0)
        item.setText(_translate("MainWindow", "1"))
        item = self.tableWidget_4.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "Storage ID"))
        item = self.tableWidget_4.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "Storage Location"))
        item = self.tableWidget_4.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "Storage Address"))
        __sortingEnabled = self.tableWidget_4.isSortingEnabled()
        self.tableWidget_4.setSortingEnabled(False)
        self.tableWidget_4.setSortingEnabled(__sortingEnabled)
        
        self.pushButton_9.clicked.connect(MainWindow.close)
        self.startx()
        
    def startx(self):
        self.label_2.hide()
        ###   Material #####
        self.m_select_all_data()        
        self.tableWidget.doubleClicked.connect(self.m_fetch_data_from_tw)
        self.pushButton.clicked.connect(self.m_add_click) 
        self.pushButton_2.clicked.connect(self.m_edit_click)       
        self.pushButton_3.clicked.connect(self.m_delete_click)
        self.pushButton_4.clicked.connect(self.m_rest_fun)
        
         ###   Contractor #####
        self.c_select_all_data()        
        self.tableWidget_2.doubleClicked.connect(self.c_fetch_data_from_tw)
        self.pushButton_5.clicked.connect(self.c_add_click) 
        self.pushButton_6.clicked.connect(self.c_edit_click)       
        self.pushButton_7.clicked.connect(self.c_delete_click)
        self.pushButton_8.clicked.connect(self.c_rest_fun)
        
        ###   Storage #####
        self.s_select_all_data()        
        self.tableWidget_4.doubleClicked.connect(self.s_fetch_data_from_tw)
        self.pushButton_14.clicked.connect(self.s_add_click) 
        self.pushButton_15.clicked.connect(self.s_edit_click)       
        self.pushButton_16.clicked.connect(self.s_delete_click)
        self.pushButton_17.clicked.connect(self.s_rest_fun)
        self.m_rest_fun()
        self.c_rest_fun()
        self.s_rest_fun()
    
    
    def m_fetch_data_from_tw(self):
        self.lineEdit_12.setText("ok fname")
        row = self.tableWidget.currentRow()     
        if(row != -1 ):
            self.dr_id=str(self.tableWidget.item(row, 0).text())
            self.lineEdit_12.setText(str(self.tableWidget.item(row, 0).text())) 
            self.lineEdit_13.setText(str(self.tableWidget.item(row, 1).text())) #Batch ID
            self.lineEdit_14.setText(str(self.tableWidget.item(row, 2).text()))  #Batch Date
            
            self.pushButton.setDisabled(True) #add
            self.pushButton_2.setEnabled(True)  #save
            self.pushButton_3.setEnabled(True) #delete           
            self.pushButton_4.setEnabled(True) #reset
            
        else:    
            self.label_2.setText("Please Select the record.")
            self.label_2.show()
            
            
    def m_rest_fun(self):
        self.lineEdit_12.setText("")  
        self.lineEdit_13.setText("") 
        self.lineEdit_14.setText("")         
        self.pushButton.setEnabled(True) #add
        self.pushButton_2.setDisabled(True)  #save
        self.pushButton_3.setDisabled(True) #delete           
        self.pushButton_4.setEnabled(True) #reset
        self.label_2.hide()
        self.m_select_all_data()        
  
        connection = sqlite3.connect("fci.db")
        results=connection.execute("select seq+1 from sqlite_sequence WHERE name = 'MATERIAL_TYPES'")       
        for x in results:           
                 self.lineEdit_12.setText(str(x[0]).zfill(6))
            
        connection.close()         
            
   
    def m_load_data(self):        
        if(self.operation_flg=="ADD"):
                #print("inside Add ")
                self.m_add_data()
        elif(self.operation_flg=="EDIT"):
                #print("inside edit ")
                self.m_edit_data()
        elif(self.operation_flg=="DELETE"):
                #print("inside delete ")
                self.m_delete_data()
        else:
                print("Invalid Operation.")
         
    def m_add_click(self):
        self.operation_flg="ADD"       
        self.m_load_data()
        
    def m_add_data(self):
        if(self.lineEdit_12.text() != ""):            
            connection = sqlite3.connect("fci.db")
            with connection:        
                    cursor = connection.cursor()
                    cursor.execute("INSERT INTO MATERIAL_TYPES(M_NAME,M_RANK) VALUES('"+self.lineEdit_13.text()+"','"+self.lineEdit_14.text()+"')")                    
            connection.commit();                    
            connection.close()  
      
            self.label_2.setText("Material:Record Added Successfully.")
            self.log_audit("Master Data","Added Material Id :" +str(self.lineEdit_12.text()))
            self.label_2.show()
        else :
            self.label_2.setText("Material:Id is Empty.")
            self.label_2.show()
            
        self.m_select_all_data()
    
    def m_edit_click(self):
        row = self.tableWidget.currentRow()     
        if(row != -1 ):
            self.operation_flg="EDIT"
            self.m_load_data()
        else:    
            self.label_2.setText("Material:Please Select the record.")
            self.label_2.show() 
    
    def m_edit_data(self):
        if(self.lineEdit_12.text() != ""):
            connection = sqlite3.connect("fci.db")
            with connection:        
                    cursor = connection.cursor()
                    cursor.execute("UPDATE MATERIAL_TYPES SET M_NAME='"+self.lineEdit_13.text()+"',M_RANK='"+self.lineEdit_14.text()+"' WHERE  M_ID ='"+str(self.dr_id)+"'")                    
            connection.commit();                    
            connection.close()   
       
        self.label_2.setText("Material:Record Saved Successfully.")
        self.log_audit("Master Data","Updated Material Id :" +str(self.lineEdit_12.text()))
        self.label_2.show()
        self.m_select_all_data()
    
    def m_delete_click(self):
        row = self.tableWidget.currentRow()     
        if(row != -1 ):
            self.operation_flg="DELETE"
            self.m_load_data()
        else:    
            self.label_2.setText("Material:Please Select the record.")
            self.label_2.show()        
     
      
    def m_delete_data(self):
        if(self.lineEdit_12.text() != ""):
            connection = sqlite3.connect("fci.db")
            with connection:        
                    cursor = connection.cursor()
                    cursor.execute("DELETE FROM MATERIAL_TYPES WHERE M_ID ='"+str(self.dr_id)+"'")                    
            connection.commit();                    
            connection.close()
            
            self.label_2.setText("Material:Record Deleted Successfully.")
            self.log_audit("Master Data","Deleted Material Id :" +str(self.lineEdit_12.text()))
            self.label_2.show()
            
            self.m_select_all_data()
            
         
    def m_select_all_data(self):     
        self.m_delete_all_records()        
        font = QtGui.QFont()
        font.setPointSize(10)
        self.tableWidget.setFont(font) 
        self.tableWidget.horizontalHeader().setStretchLastSection(True)
      
        self.tableWidget.setHorizontalHeaderLabels(['Material ID.', ' Materail Name ', 'Rank'])        
           
        connection = sqlite3.connect("fci.db")
        results=connection.execute("select M_ID,M_NAME,M_RANK FROM MATERIAL_TYPES")                        
        for row_number, row_data in enumerate(results):            
            self.tableWidget.insertRow(row_number)
            for column_number, data in enumerate(row_data):
                self.tableWidget.setItem(row_number,column_number,QTableWidgetItem(str (data)))                
        connection.close()   
        #self.tableWidget.resizeColumnsToContents()
        self.tableWidget.resizeRowsToContents()
        self.tableWidget.horizontalHeader().setStretchLastSection(True)
        self.tableWidget.setEditTriggers(QtWidgets.QTableWidget.NoEditTriggers)
        
    
    def m_delete_all_records(self):
        i = self.tableWidget.rowCount()       
        while (i>0):             
            i=i-1
            self.tableWidget.removeRow(i)        
    
    #Contractors
            
    def c_fetch_data_from_tw(self):        
        row = self.tableWidget_2.currentRow()     
        if(row != -1 ):
            self.dr_id=str(self.tableWidget_2.item(row, 0).text())
            self.lineEdit_15.setText(str(self.tableWidget_2.item(row, 0).text())) 
            self.lineEdit_16.setText(str(self.tableWidget_2.item(row, 1).text()))
            self.textEdit.setText(str(self.tableWidget_2.item(row, 2).text()))
            self.lineEdit_18.setText(str(self.tableWidget_2.item(row, 3).text()))  
            
            self.pushButton_5.setDisabled(True) #add
            self.pushButton_6.setEnabled(True)  #save
            self.pushButton_7.setEnabled(True) #delete           
            self.pushButton_8.setEnabled(True) #reset
            
        else:    
            self.label_2.setText("Please Select the record.")
            self.label_2.show()
            
            
    def c_rest_fun(self):
        self.lineEdit_15.setText("")  
        self.lineEdit_16.setText("") 
        self.lineEdit_18.setText("")         
        self.pushButton_5.setEnabled(True) #add
        self.pushButton_6.setDisabled(True)  #save
        self.pushButton_7.setDisabled(True) #delete           
        self.pushButton_8.setEnabled(True) #reset
        self.label_2.hide()
        self.c_select_all_data()        
  
        connection = sqlite3.connect("fci.db")
        results=connection.execute("select seq+1 from sqlite_sequence WHERE name = 'CONTRACTOR_MST'")       
        for x in results:           
                 self.lineEdit_15.setText(str(x[0]).zfill(6))            
        connection.close()         
            
   
    def c_load_data(self):        
        if(self.operation_flg=="ADD"):
                #print("inside Add ")
                self.c_add_data()
        elif(self.operation_flg=="EDIT"):
                #print("inside edit ")
                self.c_edit_data()
        elif(self.operation_flg=="DELETE"):
                #print("inside delete ")
                self.c_delete_data()
        else:
                print("Invalid Operation.")
         
    def c_add_click(self):
        self.operation_flg="ADD"       
        self.c_load_data()
        
    def c_add_data(self):
        if(self.lineEdit_15.text() != ""):            
            connection = sqlite3.connect("fci.db")
            with connection:        
                    cursor = connection.cursor()
                    cursor.execute("INSERT INTO CONTRACTOR_MST(C_NAME,C_ADDRESS,C_CONTACT_NO) VALUES('"+self.lineEdit_16.text()+"','"+self.textEdit.toPlainText()+"','"+self.lineEdit_18.text()+"')")                    
            connection.commit();                    
            connection.close()  
      
            self.label_2.setText("Contractor:Record Added Successfully.")
            self.log_audit("Master Data","Added Contractor Id :" +str(self.lineEdit_15.text()))
            self.label_2.show()
        else :
            self.label_2.setText("Contractor:Id is Empty.")
            self.label_2.show()
            
        self.c_select_all_data()
    
    def c_edit_click(self):
        row = self.tableWidget_2.currentRow()     
        if(row != -1 ):
            self.operation_flg="EDIT"
            self.c_load_data()
        else:    
            self.label_2.setText("Contractor:Please Select the record.")
            self.label_2.show() 
    
    def c_edit_data(self):
        if(self.lineEdit_15.text() != ""):
            connection = sqlite3.connect("fci.db")
            with connection:        
                    cursor = connection.cursor()
                    cursor.execute("UPDATE CONTRACTOR_MST SET C_NAME='"+self.lineEdit_16.text()+"',C_ADDRESS='"+self.textEdit.toPlainText()+"',C_CONTACT_NO='"+self.lineEdit_16.text()+"' WHERE  C_ID ='"+str(self.dr_id)+"'")                    
            connection.commit();                    
            connection.close()   
       
        self.label_2.setText("Contractor:Record Saved Successfully.")
        self.log_audit("Master Data","Updated Contractor Id :" +str(self.lineEdit_15.text()))
        self.label_2.show()
        self.c_select_all_data()
    
    def c_delete_click(self):
        row = self.tableWidget_2.currentRow()     
        if(row != -1 ):
            self.operation_flg="DELETE"
            self.c_load_data()
        else:    
            self.label_2.setText("Contractor:Please Select the record.")
            self.label_2.show()        
     
      
    def c_delete_data(self):
        if(self.lineEdit_15.text() != ""):
            connection = sqlite3.connect("fci.db")
            with connection:        
                    cursor = connection.cursor()
                    cursor.execute("DELETE FROM CONTRACTOR_MST WHERE C_ID ='"+str(self.dr_id)+"'")                    
            connection.commit();                    
            connection.close()
            
            self.label_2.setText("Contractor:Record Deleted Successfully.")
            self.log_audit("Master Data","Deleted Contractor Id :" +str(self.lineEdit_15.text()))
            self.label_2.show()
            
            self.c_select_all_data()
            
         
    def c_select_all_data(self):     
        self.c_delete_all_records()        
        font = QtGui.QFont()
        font.setPointSize(10)
        self.tableWidget_2.setFont(font) 
        self.tableWidget_2.horizontalHeader().setStretchLastSection(True)
      
        self.tableWidget_2.setHorizontalHeaderLabels(['Contractor ID.', ' Contractor Name ', 'Address','Contact'])        
           
        connection = sqlite3.connect("fci.db")
        results=connection.execute("select C_ID,C_NAME,C_ADDRESS,C_CONTACT_NO FROM CONTRACTOR_MST")                        
        for row_number, row_data in enumerate(results):            
            self.tableWidget_2.insertRow(row_number)
            for column_number, data in enumerate(row_data):
                self.tableWidget_2.setItem(row_number,column_number,QTableWidgetItem(str (data)))                
        connection.close()   
        #self.tableWidget.resizeColumnsToContents()
        self.tableWidget_2.resizeRowsToContents()
        self.tableWidget_2.horizontalHeader().setStretchLastSection(True)
        self.tableWidget_2.setEditTriggers(QtWidgets.QTableWidget.NoEditTriggers)
        
    
    def c_delete_all_records(self):
        i = self.tableWidget_2.rowCount()       
        while (i>0):             
            i=i-1
            self.tableWidget_2.removeRow(i)        
            
   #Storage
            
    def s_fetch_data_from_tw(self):        
        row = self.tableWidget_4.currentRow()     
        if(row != -1 ):
            self.dr_id=str(self.tableWidget_4.item(row, 0).text())
            self.lineEdit_21.setText(str(self.tableWidget_4.item(row, 0).text())) 
            self.lineEdit_22.setText(str(self.tableWidget_4.item(row, 1).text()))
            self.lineEdit_23.setText(str(self.tableWidget_4.item(row, 2).text()))  
            
            self.pushButton_14.setDisabled(True) #add
            self.pushButton_15.setEnabled(True)  #save
            self.pushButton_16.setEnabled(True) #delete           
            self.pushButton_17.setEnabled(True) #reset
            
        else:    
            self.label_2.setText("Storage:Please Select the record.")
            self.label_2.show()
            
            
    def s_rest_fun(self):
        self.lineEdit_21.setText("")  
        self.lineEdit_22.setText("") 
        self.lineEdit_23.setText("")         
        self.pushButton_14.setEnabled(True) #add
        self.pushButton_15.setDisabled(True)  #save
        self.pushButton_16.setDisabled(True) #delete           
        self.pushButton_17.setEnabled(True) #reset
        self.label_2.hide()
        self.s_select_all_data()        
  
        connection = sqlite3.connect("fci.db")
        results=connection.execute("select seq+1 from sqlite_sequence WHERE name = 'STORAGE_DETAILS'")       
        for x in results:           
                 self.lineEdit_21.setText(str(x[0]).zfill(6))            
        connection.close()         
            
   
    def s_load_data(self):        
        if(self.operation_flg=="ADD"):
                #print("inside Add ")
                self.s_add_data()
        elif(self.operation_flg=="EDIT"):
                #print("inside edit ")
                self.s_edit_data()
        elif(self.operation_flg=="DELETE"):
                #print("inside delete ")
                self.s_delete_data()
        else:
                print("Invalid Operation.")
         
    def s_add_click(self):
        self.operation_flg="ADD"       
        self.s_load_data()
        
    def s_add_data(self):
        if(self.lineEdit_21.text() != ""):            
            connection = sqlite3.connect("fci.db")
            with connection:        
                    cursor = connection.cursor()
                    cursor.execute("INSERT INTO STORAGE_DETAILS(STORAGE_NAME,STORAGE_LOCATION) VALUES('"+self.lineEdit_22.text()+"','"+self.lineEdit_23.text()+"')")                    
            connection.commit();                    
            connection.close()  
      
            self.label_2.setText("Storage:Record Added Successfully.")
            self.log_audit("Master Data","Added Storage Id :" +str(self.lineEdit_21.text()))
            self.label_2.show()
        else :
            self.label_2.setText("Storage:Id is Empty.")
            self.label_2.show()
            
        self.s_select_all_data()
    
    def s_edit_click(self):
        row = self.tableWidget_4.currentRow()     
        if(row != -1 ):
            self.operation_flg="EDIT"
            self.s_load_data()
        else:    
            self.label_2.setText("Storage:Please Select the record.")
            self.label_2.show() 
    
    def s_edit_data(self):
        if(self.lineEdit_21.text() != ""):
            connection = sqlite3.connect("fci.db")
            with connection:        
                    cursor = connection.cursor()
                    cursor.execute("UPDATE STORAGE_DETAILS SET STORAGE_NAME='"+self.lineEdit_22.text()+"',STORAGE_LOCATION='"+self.lineEdit_23.text()+"' WHERE  STORAGE_ID ='"+str(self.dr_id)+"'")                    
            connection.commit();                    
            connection.close()   
       
        self.label_2.setText("Storage:Record Saved Successfully.")
        self.log_audit("Master Data","Updated Storage Id :" +str(self.dr_id))
        self.label_2.show()
        self.s_select_all_data()
    
    def s_delete_click(self):
        row = self.tableWidget_4.currentRow()     
        if(row != -1 ):
            self.operation_flg="DELETE"
            self.s_load_data()
        else:    
            self.label_2.setText(":Please Select the record.")
            self.label_2.show()        
     
      
    def s_delete_data(self):
        if(self.lineEdit_21.text() != ""):
            connection = sqlite3.connect("fci.db")
            with connection:        
                    cursor = connection.cursor()
                    cursor.execute("DELETE FROM STORAGE_DETAILS WHERE STORAGE_ID ='"+str(self.dr_id)+"'")                    
            connection.commit();                    
            connection.close()
            
            self.label_2.setText("Storage:Record Deleted Successfully.")
            self.log_audit("Master Data","Deleted Storage Id :" +str(self.dr_id))
            self.label_2.show()
            
            self.s_select_all_data()
            
         
    def s_select_all_data(self):     
        self.s_delete_all_records()        
        font = QtGui.QFont()
        font.setPointSize(10)
        self.tableWidget_4.setFont(font) 
        self.tableWidget_4.horizontalHeader().setStretchLastSection(True)
      
        self.tableWidget_4.setHorizontalHeaderLabels(['Storage ID.', ' Storage Name '])        
           
        connection = sqlite3.connect("fci.db")
        results=connection.execute("select STORAGE_ID,STORAGE_NAME,STORAGE_LOCATION FROM STORAGE_DETAILS")                        
        for row_number, row_data in enumerate(results):            
            self.tableWidget_4.insertRow(row_number)
            for column_number, data in enumerate(row_data):
                self.tableWidget_4.setItem(row_number,column_number,QTableWidgetItem(str (data)))                
        connection.close()   
        #self.tableWidget.resizeColumnsToContents()
        self.tableWidget_4.resizeRowsToContents()
        self.tableWidget_4.horizontalHeader().setStretchLastSection(True)
        self.tableWidget_4.setEditTriggers(QtWidgets.QTableWidget.NoEditTriggers)
        
    
    def s_delete_all_records(self):
        i = self.tableWidget_4.rowCount()       
        while (i>0):             
            i=i-1
            self.tableWidget_4.removeRow(i)
            
    def log_audit(self,event_name,desc_str):        
        connection = sqlite3.connect("fci.db")
        with connection:        
            cursor = connection.cursor()       
            cursor.execute("INSERT INTO AUDIT_MST(AUDIT_TYPE,MESSAGE) VALUES(?,?)",(event_name,desc_str))
            cursor.execute("UPDATE AUDIT_MST SET USER_ID = (SELECT LOGIN_USER_ID FROM GLOBAL_VAR) WHERE USER_ID IS NULL")
            
        connection.commit();
        connection.close() 

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = fci_21_Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
