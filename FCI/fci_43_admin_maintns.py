# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'fci_43_admin_maintns.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from fci_37_CAL_LOG_pop import fci_37_Ui_MainWindow
from PyQt5 import QtCore, QtGui, QtWidgets
import datetime
import time
import sqlite3
import serial



class fci_43_Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1368, 768)
        MainWindow.setBaseSize(QtCore.QSize(0, 0))
        MainWindow.setStyleSheet("background-color: rgb(0, 170, 255);\n"
"border-color: rgb(255, 255, 255);")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.frame = QtWidgets.QFrame(self.centralwidget)
        self.frame.setGeometry(QtCore.QRect(40, 40, 1260, 701))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.frame.setFont(font)
        self.frame.setStyleSheet("background-color: rgb(0, 170, 255);\n"
"color: rgb(255, 255, 255);")
        self.frame.setFrameShape(QtWidgets.QFrame.Box)
        self.frame.setFrameShadow(QtWidgets.QFrame.Plain)
        self.frame.setLineWidth(3)
        self.frame.setObjectName("frame")
        self.label_20 = QtWidgets.QLabel(self.frame)
        self.label_20.setGeometry(QtCore.QRect(870, 30, 261, 31))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(14)
        font.setBold(True)
        font.setUnderline(False)
        font.setWeight(75)
        self.label_20.setFont(font)
        self.label_20.setStyleSheet("color: rgb(255, 255, 255);")
        self.label_20.setAlignment(QtCore.Qt.AlignCenter)
        self.label_20.setObjectName("label_20")
        self.groupBox_6 = QtWidgets.QGroupBox(self.frame)
        self.groupBox_6.setGeometry(QtCore.QRect(40, 210, 711, 331))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.groupBox_6.setFont(font)
        self.groupBox_6.setStyleSheet("color: rgb(0, 0, 0);\n"
"")
        self.groupBox_6.setFlat(False)
        self.groupBox_6.setObjectName("groupBox_6")
        self.lcdNumber = QtWidgets.QLCDNumber(self.groupBox_6)
        self.lcdNumber.setGeometry(QtCore.QRect(100, 60, 411, 101))
        font = QtGui.QFont()
        font.setFamily("MS Sans Serif")
        font.setPointSize(10)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.lcdNumber.setFont(font)
        self.lcdNumber.setFrameShape(QtWidgets.QFrame.Box)
        self.lcdNumber.setFrameShadow(QtWidgets.QFrame.Plain)
        self.lcdNumber.setLineWidth(4)
        self.lcdNumber.setDigitCount(7)       
        self.lcdNumber.setSegmentStyle(QtWidgets.QLCDNumber.Flat) 
        self.lcdNumber.setStyleSheet("background-color: rgb(0, 0, 0);\n"
"font: 10pt \"MS Sans Serif\";\n"
"color: rgb(255, 255, 255);")
        self.lcdNumber.setDigitCount(7)
        self.lcdNumber.setObjectName("lcdNumber")
        self.label_4 = QtWidgets.QLabel(self.groupBox_6)
        self.label_4.setGeometry(QtCore.QRect(550, 230, 47, 51))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.label_4.setFont(font)
        self.label_4.setObjectName("label_4")
        self.label_6 = QtWidgets.QLabel(self.groupBox_6)
        self.label_6.setGeometry(QtCore.QRect(540, 110, 81, 61))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.label_6.setFont(font)
        self.label_6.setObjectName("label_6")
        self.lcdNumber_2 = QtWidgets.QLCDNumber(self.groupBox_6)
        self.lcdNumber_2.setGeometry(QtCore.QRect(100, 190, 411, 101))
        font = QtGui.QFont()
        font.setFamily("MS Sans Serif")
        font.setPointSize(10)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.lcdNumber_2.setFont(font)
        self.lcdNumber_2.setFrameShape(QtWidgets.QFrame.Box)
        self.lcdNumber_2.setFrameShadow(QtWidgets.QFrame.Plain)
        self.lcdNumber_2.setLineWidth(4)
        self.lcdNumber_2.setDigitCount(7)       
        self.lcdNumber_2.setSegmentStyle(QtWidgets.QLCDNumber.Flat) 
        self.lcdNumber_2.setStyleSheet("background-color: rgb(0, 0, 0);\n"
"\n"
"font: 10pt \"MS Sans Serif\";\n"
"color: rgb(255, 0, 0);\n"
"border-color: rgb(255, 0, 0);")
        self.lcdNumber_2.setDigitCount(7)
        self.lcdNumber_2.setObjectName("lcdNumber_2")
        self.pushButton_9 = QtWidgets.QPushButton(self.frame)
        self.pushButton_9.setGeometry(QtCore.QRect(990, 100, 121, 51))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_9.setFont(font)
        self.pushButton_9.setStyleSheet("color: rgb(255, 255, 255);\n"
"background-color: rgb(58, 150, 4);")
        self.pushButton_9.setObjectName("pushButton_9")
        self.groupBox_7 = QtWidgets.QGroupBox(self.frame)
        self.groupBox_7.setGeometry(QtCore.QRect(50, 570, 711, 91))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.groupBox_7.setFont(font)
        self.groupBox_7.setStyleSheet("background-color: rgb(0, 85, 0);\n"
"color: rgb(255, 255, 255);")
        self.groupBox_7.setObjectName("groupBox_7")
        self.label_44 = QtWidgets.QLabel(self.groupBox_7)
        self.label_44.setGeometry(QtCore.QRect(40, 20, 641, 51))
        font = QtGui.QFont()
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.label_44.setFont(font)
        self.label_44.setStyleSheet("color: rgb(255, 255, 0);")
        self.label_44.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_44.setObjectName("label_44")
        self.lineEdit = QtWidgets.QLineEdit(self.frame)
        self.lineEdit.setGeometry(QtCore.QRect(300, 90, 271, 61))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(20)
        font.setBold(True)
        font.setWeight(75)
        self.lineEdit.setFont(font)
        self.lineEdit.setStyleSheet("background-color: rgb(255, 255, 255);color: rgb(0, 0, 0);")
        self.lineEdit.setText("")
        self.lineEdit.setEchoMode(QtWidgets.QLineEdit.Password)
        self.lineEdit.setObjectName("lineEdit")
        self.label_2 = QtWidgets.QLabel(self.frame)
        self.label_2.setGeometry(QtCore.QRect(70, 90, 191, 61))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.label_2.setFont(font)
        self.label_2.setAlignment(QtCore.Qt.AlignCenter)
        self.label_2.setObjectName("label_2")
        self.pushButton_10 = QtWidgets.QPushButton(self.frame)
        self.pushButton_10.setGeometry(QtCore.QRect(650, 100, 121, 51))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_10.setFont(font)
        self.pushButton_10.setStyleSheet("color: rgb(255, 255, 255);\n"
"background-color: rgb(58, 150, 4);")
        self.pushButton_10.setObjectName("pushButton_10")
        self.pushButton_11 = QtWidgets.QPushButton(self.frame)
        self.pushButton_11.setGeometry(QtCore.QRect(820, 100, 121, 51))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_11.setFont(font)
        self.pushButton_11.setStyleSheet("color: rgb(255, 255, 255);\n"
"background-color: rgb(58, 150, 4);")
        self.pushButton_11.setObjectName("pushButton_11")
        self.line = QtWidgets.QFrame(self.frame)
        self.line.setGeometry(QtCore.QRect(10, 180, 1226, 20))
        self.line.setFrameShadow(QtWidgets.QFrame.Plain)
        self.line.setLineWidth(3)
        self.line.setFrameShape(QtWidgets.QFrame.HLine)
        self.line.setObjectName("line")
        self.frame_2 = QtWidgets.QFrame(self.frame)
        self.frame_2.setGeometry(QtCore.QRect(780, 220, 401, 171))
        self.frame_2.setStyleSheet("color: rgb(255, 255, 0);\n"
"background-color: rgb(0, 85, 0);")
        self.frame_2.setFrameShape(QtWidgets.QFrame.Box)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Plain)
        self.frame_2.setLineWidth(3)
        self.frame_2.setObjectName("frame_2")
        self.label_3 = QtWidgets.QLabel(self.frame_2)
        self.label_3.setGeometry(QtCore.QRect(40, 20, 131, 51))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.label_3.setFont(font)
        self.label_3.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_3.setObjectName("label_3")
        self.label_5 = QtWidgets.QLabel(self.frame_2)
        self.label_5.setGeometry(QtCore.QRect(190, 20, 161, 51))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.label_5.setFont(font)
        self.label_5.setStyleSheet("")
        self.label_5.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_5.setObjectName("label_5")
        self.label_7 = QtWidgets.QLabel(self.frame_2)
        self.label_7.setGeometry(QtCore.QRect(40, 90, 131, 51))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.label_7.setFont(font)
        self.label_7.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_7.setObjectName("label_7")
        self.label_8 = QtWidgets.QLabel(self.frame_2)
        self.label_8.setGeometry(QtCore.QRect(190, 90, 181, 51))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.label_8.setFont(font)
        self.label_8.setStyleSheet("")
        self.label_8.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_8.setObjectName("label_8")
        self.pushButton_12 = QtWidgets.QPushButton(self.frame)
        self.pushButton_12.setGeometry(QtCore.QRect(890, 430, 171, 51))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_12.setFont(font)
        self.pushButton_12.setStyleSheet("background-color: rgb(209, 8, 45);\n"
"color: rgb(255, 255, 0);")
        self.pushButton_12.setObjectName("pushButton_12")
        self.label_9 = QtWidgets.QLabel(self.frame)
        self.label_9.setGeometry(QtCore.QRect(490, 30, 231, 41))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.label_9.setFont(font)
        self.label_9.setStyleSheet("color: rgb(244, 244, 0);\n"
"background-color: rgb(170, 0, 0);")
        self.label_9.setAlignment(QtCore.Qt.AlignCenter)
        self.label_9.setObjectName("label_9")
        self.pushButton_13 = QtWidgets.QPushButton(self.frame)
        self.pushButton_13.setGeometry(QtCore.QRect(890, 550, 171, 51))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_13.setFont(font)
        self.pushButton_13.setStyleSheet("color: rgb(255, 255, 255);\n"
"background-color: rgb(58, 150, 4);")
        self.pushButton_13.setObjectName("pushButton_13")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1291, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        
        self.ld_flag="No"
        self.capacity_flag="No"
        self.off_position_flag="No"
        self.flag="No"
        self.ser =""
        self.line =""                   
       
        self.xstr0=""
        self.xstr1=""
        self.xstr2=""
        self.buff=[]
        
        self.IO_error_flg=0
        self.xstr3=""
        self.xstr2=""
        self.xstr4=""
        self.current_value=0
        self.green_counter=0
        
        self.last_value=0
        self.current_value=0
        self.enable_buttons_flag="No"
        self.enable_counter=0
        self.weighing_crosses_min_wt_lim="No"
        self.weighing_crosses_max_wt_lim="No"
        self.wt_min_limit=0
        self.wt_max_limit=0      
        self.c1_count=0
        
        self.ld_set=0
        self.mod_val=0
        
        self.last_display_val=""

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label_20.setText(_translate("MainWindow", "05 Aug 2020 12:45:00 "))
        self.groupBox_6.setTitle(_translate("MainWindow", " LOAD CELL SIGNAL"))
        self.groupBox_6.hide()
        self.label_4.setText(_translate("MainWindow", "Kg."))
        self.label_6.setText(_translate("MainWindow", "Count"))
        
        self.pushButton_9.setText(_translate("MainWindow", "RETURN"))
        self.groupBox_7.setTitle(_translate("MainWindow", " MESSAGE"))
        self.groupBox_7.hide()
        self.label_44.setText(_translate("MainWindow", "Invalid Password"))
        self.label_2.setText(_translate("MainWindow", "PASSWORD :"))
        self.pushButton_10.setText(_translate("MainWindow", "SHOW"))
        self.pushButton_11.setText(_translate("MainWindow", "CLEAR"))
        self.label_3.setText(_translate("MainWindow", "K-Factor    :"))
        self.label_5.setText(_translate("MainWindow", "122.007686787"))
        self.label_7.setText(_translate("MainWindow", "C- Date      :"))
        self.label_8.setText(_translate("MainWindow", "2020-10-19 14:55"))
        self.pushButton_12.setText(_translate("MainWindow", "ZERO"))
        self.label_9.setText(_translate("MainWindow", "MAINTAINCE"))
        self.pushButton_13.setText(_translate("MainWindow", "LOG"))
        self.pushButton_12.hide()
        self.pushButton_13.hide()
        #self.label_8.hide()
        self.frame_2.hide()
        self.pushButton_9.clicked.connect(MainWindow.close)
        self.pushButton_11.clicked.connect(self.reset_loging)
        self.pushButton_10.clicked.connect(self.login_page)
        self.pushButton_12.clicked.connect(self.set_zero)
        self.pushButton_13.clicked.connect(self.open_new_window)
        
        
        connection = sqlite3.connect("fci.db")
        results=connection.execute("SELECT K_FACTOR,LAST_CALIBRATION_DT,LD_SET,IFNULL(OFF_POSITION_SET,0),(IFNULL(CAPACITY_SET,0)*1000) FROM GLOBAL_VAR  ") 
        for x in results:
               self.label_5.setText(str(x[0]))
               self.label_8.setText(str(x[1][0:17]))
               self.ld_set=int(x[2])
               self.wt_min_limit=int(x[3])
               self.wt_max_limit=int(x[4])
        connection.close()
        
        
        
        self.timer2=QtCore.QTimer()
        self.timer1=QtCore.QTimer()
        self.timer1.setInterval(1000)        
        self.timer1.timeout.connect(self.device_date)
        self.timer1.start(1)
        
       
        
    def device_date(self):     
        self.label_20.setText(datetime.datetime.now().strftime("%d %b %Y %H:%M:%S"))
    
    def login_page(self):        
        connection = sqlite3.connect("services.db")
        results=connection.execute("SELECT PWD,xxx FROM SERVICES_MST WHERE SERVICE_NAME = 'MAINTAINACE' AND STATUS = 'ACTIVE'") 
        for x in results:
            val=str(x[0])
            '''
            #print("key:"+str(x[1]))
            key=str(x[1])
            #val=str(x[0])
           
            val2=str.encode(val)
            #val2=bytes(x[0],'utf-8')
            #print("pwd:"+str(x[0]))
            d_cipher_suite = Fernet(str(x[1]))
            #print("type:"+str(type(val2)))
            plain_text = d_cipher_suite.decrypt(val2)
            #print("plain_text :"+str(plain_text,'utf-8'))
            '''
        connection.close()
        print("pwd:"+self.lineEdit.text()+" db val:"+str(val))
        if(str(self.lineEdit.text()) == str(val)):
                self.start_wt()               
                self.groupBox_6.show()
                self.groupBox_7.hide()
                self.pushButton_12.show()
                self.pushButton_13.show()
                #self.label_8.hide()
                self.frame_2.show()
                    
        else:
                self.label_44.show()
                self.label_44.setText("INCORRECT PASSWORD.")
                self.groupBox_6.hide()
                self.pushButton_12.hide()
                self.pushButton_13.hide()
                #self.label_8.hide()
                self.frame_2.hide()
                self.groupBox_7.show()
                self.stop_timer()
    
    def reset_loging(self):
        self.lineEdit.setText("")
        self.label_44.hide()
        self.label_44.setText("")
        self.groupBox_6.hide()
        self.groupBox_7.hide()        
        self.stop_timer()
        self.frame_2.hide()
        self.pushButton_12.hide()
        self.pushButton_13.hide()
    
    def set_zero(self):
        self.green_counter=15
        try:
                self.ser = serial.Serial(
                                    port='/dev/ttyAMA0',
                                    baudrate=115200,
                                    bytesize=serial.EIGHTBITS,
                                    parity=serial.PARITY_NONE,
                                    stopbits=serial.STOPBITS_ONE,
                                    xonxoff=False,
                                    timeout = 0.05
                                )
                #=============
                self.command_str="Z"
                print("Tare Command : "+str(self.command_str))
                b = bytes(self.command_str, 'utf-8')
                self.ser.write(b)
                #=============
                self.groupBox_7.show()
                self.label_44.setText("Set Zero Done." )  
                self.label_44.show()
                
                connection = sqlite3.connect("fci.db")
                with connection:        
                    cursor = connection.cursor()
                    cursor.execute("UPDATE GLOBAL_VAR SET C1_COUNT='"+str(self.c1_count)+"'")                    
                connection.commit();                    
                connection.close()
                self.log_audit("Maintaince"," Set Zero Done By Service Engineer.")
                
        except IOError:
                print("IO Errors")
                self.label_44.setText("IO Errors" )  
                self.label_44.show()
        
    def start_wt(self):
        #print("Weight Started ....")
        try:
            self.ser = serial.Serial(
                                port='/dev/ttyAMA0',
                                baudrate=115200,
                                bytesize=serial.EIGHTBITS,
                                parity=serial.PARITY_NONE,
                                stopbits=serial.STOPBITS_ONE,
                                xonxoff=False,
                                timeout = 0.05
                            )
        
            self.ser.flush()       
            
            
            self.line = self.ser.readline(15)
            print("o/p:"+str(self.line))
             
            self.timer2.setInterval(1000)        
            self.timer2.timeout.connect(self.display_lcd_val)
            self.timer2.start(1)
            
            
        except IOError:
            print("IO Errors-load cell connections error")
            self.IO_error_flg=1
            self.groupBox_7.show()
            self.label_44.show()
            self.label_44.setText("LOAD CELL CONNECTION ERROR.")
            
            
    def display_lcd_val(self):               
        #print(" inside display_lcd_val:"+str(self.IO_error_flg))
        if(self.green_counter > 0):
                self.pushButton_12.setStyleSheet("background-color: rgb(0, 170, 0);")
                self.lcdNumber_2.setStyleSheet("color: rgb(255, 255, 0);\n background-color: rgb(0, 0, 0);")               
                self.green_counter=self.green_counter-1
        else:
                self.pushButton_12.setStyleSheet("background-color: rgb(170, 0, 0);")
        if(self.IO_error_flg==0):
            try:
                self.line = self.ser.readline()
                print(" raw o/p:"+str(self.line))
                print("self.line:"+str(self.line,'utf-8'))
                self.xstr0=str(self.line,'utf-8')
                self.xstr1=self.xstr0.replace("\r","")
                self.xstr2=self.xstr1.replace("\n","")
                self.buff=self.xstr2.split("_")
                self.last_value=self.current_value 
                if(len(self.buff)> 1):
                       # if(str(self.buff[3]) == 'R'): 
                                self.xstr2=str(self.buff[0])
                                try:
                                     self.xstr4=int(self.xstr2)
                                except ValueError:                        
                                    print("Value Error"+str(self.xstr2))
                                    self.xstr4=0                    
                                try:
                                    #self.current_value=float(int(self.xstr4)/1000)
                                    if(int(self.ld_set) > 0):
                                        self.mod_val=0
                                        self.mod_val=(int(self.xstr4) % int(self.ld_set))
                                        self.mod_val=int(self.xstr4)-self.mod_val
                                        #print("min :"+str(self.weighing_crosses_min_wt_lim)+" current val :"+str(self.current_value)+" min_wt_lim:"+str(self.wt_min_limit))
                                        #print("max :"+str(self.weighing_crosses_max_wt_lim))                                
                                        if(self.weighing_crosses_min_wt_lim=="No"):
                                                self.lcdNumber_2.setProperty("value", "0")
                                                #self.lcdNumber.display("0")
                                                self.current_value=int(self.mod_val)
                                        elif(self.weighing_crosses_max_wt_lim=="Yes"):    
                                                self.lcdNumber_2.setProperty("value", "-1")
                                                self.lcdNumber_2.display("SORRY")
                                                self.current_value=int(self.mod_val)
                                        else:
                                                self.lcdNumber_2.setProperty("value", str(self.mod_val))                                                
                                                self.current_value=int(self.mod_val)
                                        
                                        #self.lcdNumber_2.setProperty("value", str(self.mod_val))
                                        #self.current_value=int(self.mod_val)
                                    else:
                                        self.lcdNumber_2.setProperty("value", str(self.xstr4))
                                    
                                except ValueError:
                                    print("Value Error :"+str(self.xstr4))
                                    self.xstr4=0
                                    self.current_value=0                    
                                
                                self.lcdNumber.setProperty("value", str(self.buff[1]))
                                self.c1_count=str(self.buff[1])
                               # self.lcdNumber_2.setProperty("value", str(self.xstr4))
                                
                                if(self.enable_buttons_flag=="Yes"):
                                       self.lcdNumber_2.setStyleSheet("color: rgb(0, 170, 0);\n background-color: rgb(0, 0, 0);")
                                else:
                                       self.lcdNumber_2.setStyleSheet("color: rgb(255, 0, 0);\n background-color: rgb(0, 0, 0);")
                                
                                if(int(self.current_value) > int(self.wt_min_limit)):                                                     
                                          self.weighing_crosses_min_wt_lim="Yes"
                                else:
                                          self.weighing_crosses_min_wt_lim="No"
                                
                                if(int(self.current_value) > int(self.wt_max_limit)):                                                     
                                          self.weighing_crosses_max_wt_lim="Yes"
                                else:
                                          self.weighing_crosses_max_wt_lim="No"
                                
                                #print("enable_buttons_flag :"+str(self.enable_buttons_flag)+" self.last_value :"+str(self.last_value)+" self.current_value :"+str(self.current_value))
                                                                
                                if(self.last_value==self.current_value):
                                        self.enable_counter=self.enable_counter+1
                                        if(self.enable_counter > 15):
                                             self.enable_buttons_flag="Yes"                                             
                                        else:                                             
                                             self.enable_buttons_flag="No"                                            
                                else:            
                                        self.enable_buttons_flag="No"
                                        self.enable_counter=0
                                
                    
            except IOError:
                print("IO Errors : Data Read Error") 
                self.IO_error_flg=1
                self.groupBox_7.show()
                self.label_44.show()
                self.label_44.setText("IO Errors .")
        
    def stop_timer(self):
       if(self.timer2.isActive()):
           self.timer2.stop()           
           
 
    def open_new_window(self):       
        self.window = QtWidgets.QMainWindow()
        self.ui=fci_37_Ui_MainWindow()
        self.ui.setupUi(self.window)           
        self.window.show()
    
    def log_audit(self,event_name,desc_str):        
        connection = sqlite3.connect("fci.db")
        with connection:        
            cursor = connection.cursor()       
            cursor.execute("INSERT INTO AUDIT_MST(AUDIT_TYPE,MESSAGE) VALUES(?,?)",(event_name,desc_str))
            cursor.execute("UPDATE AUDIT_MST SET USER_ID = (SELECT LOGIN_USER_ID FROM GLOBAL_VAR) WHERE USER_ID IS NULL")            
        connection.commit();
        connection.close()


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = fci_43_Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
