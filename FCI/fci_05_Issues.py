# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'fci_05_Issues.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.Qt import QTableWidgetItem
import datetime
import sqlite3
from PyQt5.QtCore import QRegExp
from PyQt5.QtGui import QRegExpValidator


class fci_05_Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1368, 768)
        MainWindow.setBaseSize(QtCore.QSize(0, 0))
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.frame = QtWidgets.QFrame(self.centralwidget)
        self.frame.setGeometry(QtCore.QRect(20, 20, 1311, 701))
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.label = QtWidgets.QLabel(self.frame)
        self.label.setGeometry(QtCore.QRect(10, 10, 231, 51))
        font = QtGui.QFont()
        font.setPointSize(24)
        self.label.setFont(font)
        #self.label.setStyleSheet("color: rgb(170, 85, 127);")
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.label_20 = QtWidgets.QLabel(self.frame)
        self.label_20.setGeometry(QtCore.QRect(1140, 0, 171, 31))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        font.setBold(False)
        font.setUnderline(False)
        font.setWeight(50)
        self.label_20.setFont(font)
        self.label_20.setStyleSheet("color: rgb(0, 0, 255);")
        self.label_20.setAlignment(QtCore.Qt.AlignCenter)
        self.label_20.setObjectName("label_20")
        self.pushButton = QtWidgets.QPushButton(self.frame)
        self.pushButton.setGeometry(QtCore.QRect(680, 650, 91, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.pushButton.setFont(font)
        self.pushButton.setObjectName("pushButton")
        self.pushButton_3 = QtWidgets.QPushButton(self.frame)
        self.pushButton_3.setGeometry(QtCore.QRect(920, 650, 91, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.pushButton_3.setFont(font)
        self.pushButton_3.setObjectName("pushButton_3")
        self.tableWidget = QtWidgets.QTableWidget(self.frame)
        self.tableWidget.setGeometry(QtCore.QRect(30, 140, 611, 531))
        self.tableWidget.setObjectName("tableWidget")
        font = QtGui.QFont()
        font.setPointSize(10)
        self.tableWidget.setFont(font)
        self.tableWidget.setColumnCount(9)
        self.tableWidget.setRowCount(5)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setVerticalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setVerticalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setVerticalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setVerticalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setVerticalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(10)
        item.setFont(font)
        self.tableWidget.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(10)
        item.setFont(font)
        self.tableWidget.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(10)
        item.setFont(font)
        self.tableWidget.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(10)
        item.setFont(font)
        self.tableWidget.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(10)
        item.setFont(font)
        self.tableWidget.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(10)
        item.setFont(font)
        self.tableWidget.setHorizontalHeaderItem(5, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(10)
        item.setFont(font)
        self.tableWidget.setHorizontalHeaderItem(6, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(10)
        item.setFont(font)
        self.tableWidget.setHorizontalHeaderItem(7, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(10)
        item.setFont(font)
        self.tableWidget.setHorizontalHeaderItem(8, item)
        self.label_21 = QtWidgets.QLabel(self.frame)
        self.label_21.setGeometry(QtCore.QRect(550, 10, 331, 41))
        font = QtGui.QFont()
        font.setFamily("MS Sans Serif")
        font.setPointSize(10)
        font.setBold(True)
        font.setUnderline(False)
        font.setWeight(75)
        self.label_21.setFont(font)
        self.label_21.setStyleSheet("color: rgb(255, 0, 0);")
        self.label_21.setAlignment(QtCore.Qt.AlignCenter)
        self.label_21.setObjectName("label_21")
        self.label_22 = QtWidgets.QLabel(self.frame)
        self.label_22.setGeometry(QtCore.QRect(700, 130, 111, 31))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        font.setBold(False)
        font.setUnderline(False)
        font.setWeight(50)
        self.label_22.setFont(font)
        self.label_22.setStyleSheet("color: rgb(0, 0, 255);")
        self.label_22.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.label_22.setObjectName("label_22")
        self.label_23 = QtWidgets.QLabel(self.frame)
        self.label_23.setGeometry(QtCore.QRect(680, 180, 141, 31))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        font.setBold(False)
        font.setUnderline(False)
        font.setWeight(50)
        self.label_23.setFont(font)
        self.label_23.setStyleSheet("color: rgb(0, 0, 255);")
        self.label_23.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.label_23.setObjectName("label_23")
        self.label_28 = QtWidgets.QLabel(self.frame)
        self.label_28.setGeometry(QtCore.QRect(680, 590, 61, 31))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        font.setBold(True)
        font.setUnderline(False)
        font.setWeight(75)
        self.label_28.setFont(font)
        self.label_28.setStyleSheet("color: rgb(0, 0, 255);")
        self.label_28.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_28.setObjectName("label_28")
        self.lineEdit = QtWidgets.QLineEdit(self.frame)
        reg_ex = QRegExp("(\\d+\\.\\d+)")
        input_validator = QRegExpValidator(reg_ex, self.lineEdit)
        self.lineEdit.setValidator(input_validator)
        self.lineEdit.setGeometry(QtCore.QRect(840, 180, 111, 31))
        
        font = QtGui.QFont()
        font.setPointSize(10)
        self.lineEdit.setFont(font)
        self.lineEdit.setObjectName("lineEdit")
        self.pushButton_4 = QtWidgets.QPushButton(self.frame)
        self.pushButton_4.setGeometry(QtCore.QRect(800, 650, 91, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.pushButton_4.setFont(font)
        self.pushButton_4.setObjectName("pushButton_4")
        self.pushButton_5 = QtWidgets.QPushButton(self.frame)
        self.pushButton_5.setGeometry(QtCore.QRect(1050, 650, 91, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.pushButton_5.setFont(font)
        self.pushButton_5.setObjectName("pushButton_5")
        self.lineEdit_7 = QtWidgets.QLineEdit(self.frame)
        self.lineEdit_7.setGeometry(QtCore.QRect(1090, 50, 101, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.lineEdit_7.setFont(font)
        self.lineEdit_7.setText("")
        self.lineEdit_7.setObjectName("lineEdit_7")
        self.pushButton_6 = QtWidgets.QPushButton(self.frame)
        self.pushButton_6.setGeometry(QtCore.QRect(1210, 50, 91, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.pushButton_6.setFont(font)
        self.pushButton_6.setObjectName("pushButton_6")
        self.label_3 = QtWidgets.QLabel(self.frame)
        self.label_3.setGeometry(QtCore.QRect(990, 50, 81, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label_3.setFont(font)
        #self.label_3.setStyleSheet("color: rgb(170, 85, 127);")
        self.label_3.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_3.setObjectName("label_3")
        self.pushButton_7 = QtWidgets.QPushButton(self.frame)
        self.pushButton_7.setGeometry(QtCore.QRect(30, 80, 201, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.pushButton_7.setFont(font)
        self.pushButton_7.setObjectName("pushButton_7")
        self.lineEdit_10 = QtWidgets.QLineEdit(self.frame)
        self.lineEdit_10.setGeometry(QtCore.QRect(840, 130, 111, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.lineEdit_10.setFont(font)
        self.lineEdit_10.setObjectName("lineEdit_10")
        self.label_27 = QtWidgets.QLabel(self.frame)
        self.label_27.setGeometry(QtCore.QRect(990, 130, 91, 31))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        font.setBold(False)
        font.setUnderline(False)
        font.setWeight(50)
        self.label_27.setFont(font)
        self.label_27.setStyleSheet("color: rgb(0, 0, 255);")
        self.label_27.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.label_27.setObjectName("label_27")
        self.label_4 = QtWidgets.QLabel(self.frame)
        self.label_4.setGeometry(QtCore.QRect(1110, 130, 81, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label_4.setFont(font)
        #self.label_4.setStyleSheet("color: rgb(170, 85, 127);")
        self.label_4.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_4.setObjectName("label_4")
        self.pushButton_8 = QtWidgets.QPushButton(self.frame)
        self.pushButton_8.setGeometry(QtCore.QRect(1210, 130, 71, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.pushButton_8.setFont(font)
        self.pushButton_8.setObjectName("pushButton_8")
        self.label_30 = QtWidgets.QLabel(self.frame)
        self.label_30.setGeometry(QtCore.QRect(1000, 180, 91, 31))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        font.setBold(False)
        font.setUnderline(False)
        font.setWeight(50)
        self.label_30.setFont(font)
        self.label_30.setStyleSheet("color: rgb(0, 0, 255);")
        self.label_30.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.label_30.setObjectName("label_30")
        self.label_6 = QtWidgets.QLabel(self.frame)
        self.label_6.setGeometry(QtCore.QRect(1110, 180, 91, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label_6.setFont(font)
        #self.label_6.setStyleSheet("color: rgb(170, 85, 127);")
        self.label_6.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_6.setObjectName("label_6")
        self.pushButton_9 = QtWidgets.QPushButton(self.frame)
        self.pushButton_9.setGeometry(QtCore.QRect(1210, 190, 71, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.pushButton_9.setFont(font)
        self.pushButton_9.setObjectName("pushButton_9")
        self.groupBox = QtWidgets.QGroupBox(self.frame)
        self.groupBox.setGeometry(QtCore.QRect(680, 230, 601, 341))
        #self.groupBox.setStyleSheet("background-color: rgb(231, 255, 235);")
        font = QtGui.QFont()
        font.setPointSize(10)
        self.groupBox.setFont(font)
        self.groupBox.setObjectName("groupBox")
        self.tableWidget_2 = QtWidgets.QTableWidget(self.groupBox)
        self.tableWidget_2.setGeometry(QtCore.QRect(20, 210, 551, 111))
        self.tableWidget_2.setObjectName("tableWidget_2")
        self.tableWidget_2.setColumnCount(6)
        self.tableWidget_2.setRowCount(3)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_2.setVerticalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_2.setVerticalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_2.setVerticalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        item.setFont(font)
        self.tableWidget_2.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        item.setFont(font)
        self.tableWidget_2.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        item.setFont(font)
        self.tableWidget_2.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(10)
        item.setFont(font)
        self.tableWidget_2.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(10)
        item.setFont(font)
        self.tableWidget_2.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(10)
        item.setFont(font)
        self.tableWidget_2.setItem(0, 0, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(10)
        item.setFont(font)
        self.tableWidget_2.setItem(0, 1, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(10)
        item.setFont(font)
        self.tableWidget_2.setItem(1, 0, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(10)
        item.setFont(font)
        self.tableWidget_2.setItem(1, 1, item)
        self.comboBox_2 = QtWidgets.QComboBox(self.groupBox)
        self.comboBox_2.setGeometry(QtCore.QRect(130, 60, 171, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.comboBox_2.setFont(font)
        self.comboBox_2.setObjectName("comboBox_2")        
        self.label_24 = QtWidgets.QLabel(self.groupBox)
        self.label_24.setGeometry(QtCore.QRect(20, 60, 91, 31))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        font.setBold(False)
        font.setUnderline(False)
        font.setWeight(50)
        self.label_24.setFont(font)
        self.label_24.setStyleSheet("color: rgb(0, 0, 255);")
        self.label_24.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_24.setObjectName("label_24")
        self.label_25 = QtWidgets.QLabel(self.groupBox)
        self.label_25.setGeometry(QtCore.QRect(20, 110, 141, 31))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        font.setBold(False)
        font.setUnderline(False)
        font.setWeight(50)
        self.label_25.setFont(font)
        self.label_25.setStyleSheet("color: rgb(0, 0, 255);")
        self.label_25.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_25.setObjectName("label_25")
        self.lineEdit_2 = QtWidgets.QLineEdit(self.groupBox)
        reg_ex = QRegExp("(\\d+\\.\\d+)")
        input_validator = QRegExpValidator(reg_ex, self.lineEdit_2)
        self.lineEdit_2.setValidator(input_validator)
        self.lineEdit_2.setGeometry(QtCore.QRect(170, 110, 91, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.lineEdit_2.setFont(font)
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.pushButton_10 = QtWidgets.QPushButton(self.groupBox)
        self.pushButton_10.setGeometry(QtCore.QRect(330, 60, 71, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.pushButton_10.setFont(font)
        self.pushButton_10.setObjectName("pushButton_10")
        self.pushButton_11 = QtWidgets.QPushButton(self.groupBox)
        self.pushButton_11.setGeometry(QtCore.QRect(510, 60, 71, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.pushButton_11.setFont(font)
        self.pushButton_11.setObjectName("pushButton_11")
        self.label_26 = QtWidgets.QLabel(self.groupBox)
        self.label_26.setGeometry(QtCore.QRect(20, 160, 131, 31))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        font.setBold(False)
        font.setUnderline(False)
        font.setWeight(50)
        self.label_26.setFont(font)
        self.label_26.setStyleSheet("color: rgb(0, 0, 255);")
        self.label_26.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_26.setObjectName("label_26")
        self.lineEdit_4 = QtWidgets.QLineEdit(self.groupBox)
        reg_ex = QRegExp("\d+")
        input_validator = QRegExpValidator(reg_ex, self.lineEdit_4)
        self.lineEdit_4.setValidator(input_validator)
        
        self.lineEdit_4.setGeometry(QtCore.QRect(170, 160, 91, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.lineEdit_4.setFont(font)
        self.lineEdit_4.setObjectName("lineEdit_4")
        self.label_33 = QtWidgets.QLabel(self.groupBox)
        self.label_33.setGeometry(QtCore.QRect(20, 20, 211, 31))
        font = QtGui.QFont()
        font.setFamily("MS Sans Serif")
        font.setPointSize(10)
        font.setBold(False)
        font.setUnderline(False)
        font.setWeight(50)
        self.label_33.setFont(font)
        self.label_33.setStyleSheet("color: rgb(255, 0, 0);")
        self.label_33.setAlignment(QtCore.Qt.AlignCenter)
        self.label_33.setObjectName("label_33")
        self.label_34 = QtWidgets.QLabel(self.groupBox)
        self.label_34.setGeometry(QtCore.QRect(310, 110, 131, 31))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        font.setBold(False)
        font.setUnderline(False)
        font.setWeight(50)
        self.label_34.setFont(font)
        self.label_34.setStyleSheet("color: rgb(0, 0, 255);")
        self.label_34.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.label_34.setObjectName("label_34")
        self.label_35 = QtWidgets.QLabel(self.groupBox)
        self.label_35.setGeometry(QtCore.QRect(310, 160, 101, 31))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        font.setBold(False)
        font.setUnderline(False)
        font.setWeight(50)
        self.label_35.setFont(font)
        self.label_35.setStyleSheet("color: rgb(0, 0, 255);")
        self.label_35.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.label_35.setObjectName("label_35")
        self.label_5 = QtWidgets.QLabel(self.groupBox)
        self.label_5.setGeometry(QtCore.QRect(460, 110, 121, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label_5.setFont(font)
        #self.label_5.setStyleSheet("color: rgb(170, 85, 127);")
        self.label_5.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_5.setObjectName("label_5")
        self.label_9 = QtWidgets.QLabel(self.groupBox)
        self.label_9.setGeometry(QtCore.QRect(430, 160, 61, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label_9.setFont(font)
        #self.label_9.setStyleSheet("color: rgb(170, 85, 127);")
        self.label_9.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_9.setObjectName("label_9")
        self.pushButton_12 = QtWidgets.QPushButton(self.groupBox)
        self.pushButton_12.setGeometry(QtCore.QRect(420, 60, 71, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.pushButton_12.setFont(font)
        self.pushButton_12.setObjectName("pushButton_12")
        self.pushButton_14 = QtWidgets.QPushButton(self.groupBox)
        self.pushButton_14.setGeometry(QtCore.QRect(510, 160, 71, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.pushButton_14.setFont(font)
        self.pushButton_14.setObjectName("pushButton_14")
        self.label_29 = QtWidgets.QLabel(self.frame)
        self.label_29.setGeometry(QtCore.QRect(260, 70, 141, 41))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        font.setBold(True)
        font.setUnderline(False)
        font.setWeight(75)
        self.label_29.setFont(font)
        self.label_29.setStyleSheet("color: rgb(0, 0, 255);")
        self.label_29.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_29.setObjectName("label_29")
        self.lineEdit_3 = QtWidgets.QLineEdit(self.frame)
        self.lineEdit_3.setGeometry(QtCore.QRect(420, 80, 221, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.lineEdit_3.setFont(font)
        self.lineEdit_3.setObjectName("lineEdit_3")
        self.label_32 = QtWidgets.QLabel(self.frame)
        self.label_32.setGeometry(QtCore.QRect(860, 590, 81, 31))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        font.setBold(True)
        font.setUnderline(False)
        font.setWeight(75)
        self.label_32.setFont(font)
        self.label_32.setStyleSheet("color: rgb(0, 0, 255);")
        self.label_32.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_32.setObjectName("label_32")
        self.label_7 = QtWidgets.QLabel(self.frame)
        self.label_7.setGeometry(QtCore.QRect(950, 590, 41, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label_7.setFont(font)
        #self.label_7.setStyleSheet("color: rgb(170, 85, 127);")
        self.label_7.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_7.setObjectName("label_7")
        self.label_8 = QtWidgets.QLineEdit(self.frame)
        self.label_8.setGeometry(QtCore.QRect(750, 590, 111, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label_8.setFont(font)
        #self.label_8.setStyleSheet("color: rgb(170, 85, 127);")
        self.label_8.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_8.setObjectName("label_8")
        self.label_31 = QtWidgets.QLabel(self.frame)
        self.label_31.setGeometry(QtCore.QRect(1020, 590, 81, 31))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        font.setBold(True)
        font.setUnderline(False)
        font.setWeight(75)
        self.label_31.setFont(font)
        self.label_31.setStyleSheet("color: rgb(0, 0, 255);")
        self.label_31.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_31.setObjectName("label_31")
        self.comboBox = QtWidgets.QComboBox(self.frame)
        self.comboBox.setGeometry(QtCore.QRect(1110, 590, 161, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.comboBox.setFont(font)
        self.comboBox.setObjectName("comboBox")
        
        self.pushButton_13 = QtWidgets.QPushButton(self.frame)
        self.pushButton_13.setGeometry(QtCore.QRect(1180, 650, 91, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.pushButton_13.setFont(font)
        self.pushButton_13.setObjectName("pushButton_13")
        self.line = QtWidgets.QFrame(self.frame)
        self.line.setGeometry(QtCore.QRect(680, 100, 621, 20))
        self.line.setFrameShape(QtWidgets.QFrame.HLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        
        
        self.calendarWidget = QtWidgets.QCalendarWidget(self.frame)
        self.calendarWidget.setGeometry(QtCore.QRect(940, 220, 312, 183))
        self.calendarWidget.setGridVisible(True)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.calendarWidget.setFont(font)
        self.calendarWidget.setObjectName("calendarWidget")
        
        self.calendarWidget_2 = QtWidgets.QCalendarWidget(self.frame)
        self.calendarWidget_2.setGeometry(QtCore.QRect(940, 220, 312, 183))
        self.calendarWidget_2.setGridVisible(True)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.calendarWidget_2.setFont(font)
        self.calendarWidget_2.setObjectName("calendarWidget_2")
        
        
        
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1368, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)        
        self.goAhead="No"
        self.rec_id=0
        self.dr_id="0"
        self.dr_id2="0"
        self.device_id=""
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label.setText(_translate("MainWindow", "Issues Details"))
        self.label_20.setText(_translate("MainWindow", "05 Aug 2020 12:45:00"))
        self.pushButton.setText(_translate("MainWindow", "Add"))
        self.pushButton_3.setText(_translate("MainWindow", "Delete"))
        item = self.tableWidget.verticalHeaderItem(0)
        item.setText(_translate("MainWindow", "1"))
        item = self.tableWidget.verticalHeaderItem(1)
        item.setText(_translate("MainWindow", "2"))
        item = self.tableWidget.verticalHeaderItem(2)
        item.setText(_translate("MainWindow", "3"))
        item = self.tableWidget.verticalHeaderItem(3)
        item.setText(_translate("MainWindow", "4"))
        item = self.tableWidget.verticalHeaderItem(4)
        item.setText(_translate("MainWindow", "5"))
        item = self.tableWidget.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "Issue.ID"))
        item = self.tableWidget.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "Release Order Id"))
        item = self.tableWidget.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "Total Net.Wt.Ton"))
        item = self.tableWidget.horizontalHeaderItem(3)
        item.setText(_translate("MainWindow", "Expiry Date"))
        item = self.tableWidget.horizontalHeaderItem(4)
        item.setText(_translate("MainWindow", "Issue Date"))
        item = self.tableWidget.horizontalHeaderItem(5)
        item.setText(_translate("MainWindow", "Total No. of Bags"))
        item = self.tableWidget.horizontalHeaderItem(6)
        item.setText(_translate("MainWindow", "Status"))
        item = self.tableWidget.horizontalHeaderItem(7)
        item.setText(_translate("MainWindow", "Contractor Name"))
        item = self.tableWidget.horizontalHeaderItem(8)
        item.setText(_translate("MainWindow", "RO TYPE"))
        self.label_21.setText(_translate("MainWindow", "Please select the record to Edit."))
        self.label_21.hide()
        self.label_22.setText(_translate("MainWindow", "Rel.Order Id. :"))
        self.label_23.setText(_translate("MainWindow", "Total Net. Wt (Ton) :"))
        self.label_28.setText(_translate("MainWindow", "Status:"))
        self.lineEdit.setText(_translate("MainWindow", "5000"))
        self.pushButton_4.setText(_translate("MainWindow", "Save"))
        self.pushButton_5.setText(_translate("MainWindow", "Reset"))
        self.pushButton_6.setText(_translate("MainWindow", "Search "))
        self.label_3.setText(_translate("MainWindow", "Rel.Order Id. :"))
        self.pushButton_7.setText(_translate("MainWindow", "Issues Quantity Details"))
        self.lineEdit_10.setText(_translate("MainWindow", "R0002333"))
        self.label_27.setText(_translate("MainWindow", "Issues Date :"))
        self.label_4.setText(_translate("MainWindow", "08 Aug 2020"))
        self.pushButton_8.setText(_translate("MainWindow", "Get Date"))
        self.label_30.setText(_translate("MainWindow", "Expiry Date :"))
        self.label_6.setText(_translate("MainWindow", "08 Aug 2020"))
        self.pushButton_9.setText(_translate("MainWindow", "Get Date"))
        self.groupBox.setTitle(_translate("MainWindow", "Demanded Quantity"))
        #self.groupBox.setDisabled(True)
        item = self.tableWidget_2.verticalHeaderItem(0)
        item.setText(_translate("MainWindow", "1"))
        item = self.tableWidget_2.verticalHeaderItem(1)
        item.setText(_translate("MainWindow", "2"))
        item = self.tableWidget_2.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "Category"))
        item = self.tableWidget_2.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "Demanded Net Wt-Ton"))
        item = self.tableWidget_2.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "Demanded Bags."))
        item = self.tableWidget_2.horizontalHeaderItem(3)
        item.setText(_translate("MainWindow", "Released Bags"))
        item = self.tableWidget_2.horizontalHeaderItem(4)
        item.setText(_translate("MainWindow", "Release Net.Wt. Ton"))
        __sortingEnabled = self.tableWidget_2.isSortingEnabled()
        self.tableWidget_2.setSortingEnabled(False)
        self.tableWidget_2.setSortingEnabled(__sortingEnabled)
        
        self.label_24.setText(_translate("MainWindow", "Category:"))
        self.label_25.setText(_translate("MainWindow", "Issue.Net.Wt Ton:"))
        self.lineEdit_2.setText(_translate("MainWindow", "200"))
        self.pushButton_10.setText(_translate("MainWindow", "Add"))
        self.pushButton_11.setText(_translate("MainWindow", "Delete"))
        self.label_26.setText(_translate("MainWindow", "Issue. Bags:"))
        self.lineEdit_4.setText(_translate("MainWindow", "200"))
        self.label_33.setText(_translate("MainWindow", "Please select the record to Delete."))
        self.label_33.hide()
        self.label_34.setText(_translate("MainWindow", "Rel.Net.Wt Ton:"))
        self.label_35.setText(_translate("MainWindow", "Released.Bags.:"))
        self.label_5.setText(_translate("MainWindow", "0.000"))
        self.label_9.setText(_translate("MainWindow", "0"))
        self.pushButton_12.setText(_translate("MainWindow", "Save"))
        self.pushButton_14.setText(_translate("MainWindow", "Refresh"))
        self.label_29.setText(_translate("MainWindow", "Release OrderType :"))
        self.lineEdit_3.setText(_translate("MainWindow", "PDS ISSUE FOR YAER 2020"))
        self.label_32.setText(_translate("MainWindow", "Total Bags:"))
        self.label_7.setText(_translate("MainWindow", "9000"))
        self.label_8.setText(_translate("MainWindow", "Pending"))
        self.label_31.setText(_translate("MainWindow", "Contractor:"))
        
        self.pushButton_13.setText(_translate("MainWindow", "Return"))
        self.pushButton_13.clicked.connect(MainWindow.close)
        self.calendarWidget.hide()
        self.calendarWidget_2.hide()
        self.select_all_data()
        self.pushButton_9.clicked.connect(self.EXP_DT_on_click)
        self.pushButton_8.clicked.connect(self.ISSUE_DT_on_click)
        self.calendarWidget.clicked.connect(self.calendar_on_click)
        self.calendarWidget_2.clicked.connect(self.calendar_2_on_click)
        self.lineEdit.textChanged.connect(self.no_of_bags_calc)
        
        
       
        
        self.reset_fun()
        self.pushButton.clicked.connect(self.add_click)
        self.tableWidget.doubleClicked.connect(self.fetch_data_from_tw)
        self.pushButton_5.clicked.connect(self.reset_fun)
        self.pushButton_3.clicked.connect(self.delete_click)
        self.pushButton_4.clicked.connect(self.edit_click)
        
        
        self.reset_fun2()
        self.tableWidget_2.doubleClicked.connect(self.fetch_data_from_tw2)
        self.pushButton_14.clicked.connect(self.reset_fun2)
        
        
        self.pushButton_10.clicked.connect(self.add_click2) #Add
        self.pushButton_12.clicked.connect(self.edit_click2) #save
        self.pushButton_11.clicked.connect(self.delete_click2) #Delete
           
         
        self.i=0
        connection = sqlite3.connect("fci.db")
        results=connection.execute("SELECT C_NAME FROM CONTRACTOR_MST ORDER BY C_NAME DESC ") 
        for x in results:            
            self.comboBox.addItem("")
            self.comboBox.setItemText(self.i,str(x[0]))            
            self.i=self.i+1
        connection.close()
        
        self.i=0
        connection = sqlite3.connect("fci.db")
        results=connection.execute("SELECT M_NAME FROM MATERIAL_TYPES ORDER BY M_NAME DESC ") 
        for x in results:            
            self.comboBox_2.addItem("")
            self.comboBox_2.setItemText(self.i,str(x[0]))            
            self.i=self.i+1
        connection.close()
        connection = sqlite3.connect("fci.db")
        results=connection.execute("SELECT DEVICE_ID FROM GLOBAL_VAR")       
        for x in results:
                   self.device_id=str(x[0])
        connection.close()
        
    def no_of_bags_calc(self):
        if(self.lineEdit.text() != ""):
            bags_cnt=float(float(self.lineEdit.text())*1000/50)
            self.label_7.setText(str(bags_cnt))            
        else:
             self.lineEdit.setText("0") 
        
    def reset_fun(self):
        self.dr_id=""
        self.lineEdit_10.setText("") #order ID
        self.lineEdit.setText("") #Total Net Wt
        self.label_6.setText("")  #exp date
        self.label_4.setText("")  #issue date
        self.label_7.setText("")  #bags
        self.label_8.setText("Open")  #status        
        self.lineEdit_3.setText("") #RO Type    
        self.pushButton_7.setDisabled(True)
        self.lineEdit_2.setText("") #
        self.lineEdit_4.setText("") #
        self.pushButton_3.setDisabled(True)
        self.pushButton_4.setDisabled(True)
        self.pushButton.setEnabled(True)
        self.pushButton_7.setDisabled(True)
        self.label_6.setText(datetime.datetime.now().strftime("%Y-%m-%d"))
        self.label_4.setText(datetime.datetime.now().strftime("%Y-%m-%d"))
        self.label_21.hide()
        self.label_33.hide()
        self.delete_data2_all()
        self.select_all_data2()
        self.select_all_data()
        
    
    def fetch_data_from_tw(self):
        self.lineEdit_10.setText("ok fname")
        row = self.tableWidget.currentRow()     
        if(row != -1 ):
            self.dr_id=str(self.tableWidget.item(row, 0).text())
            self.lineEdit_10.setText(str(self.tableWidget.item(row, 1).text())) #order ID
            self.lineEdit.setText(str(self.tableWidget.item(row, 2).text())) #Total Net Wt
            self.label_6.setText(str(self.tableWidget.item(row, 3).text()))  #exp date
            self.label_4.setText(str(self.tableWidget.item(row, 4).text()))  #issue date
            self.label_7.setText(str(self.tableWidget.item(row, 5).text()))  #bags
            self.label_8.setText(str(self.tableWidget.item(row, 6).text()))  #status
            self.comboBox.setCurrentText(str(self.tableWidget.item(row, 7).text()))  #Contrctor
            self.lineEdit_3.setText(str(self.tableWidget.item(row, 8).text())) #RO Type
            self.delete_data2_all()
            connection = sqlite3.connect("fci.db")
            with connection:        
                    cursor = connection.cursor()
                    cursor.execute("INSERT INTO ISSUE_QUANTITY_DTLS_TMP(MATERIAL_NAME,QUANTITY_BAGS,QUANTITY_NET_WT,RELEASED_BAGS,RELEASE_NET_WT)  SELECT MATERIAL_NAME,QUANTITY_BAGS,QUANTITY_NET_WT,RELEASED_BAGS,RELEASE_NET_WT FROM ISSUE_QUANTITY_DTLS WHERE ISSUE_ID= '"+str(self.dr_id)+"' ")                    
            connection.commit();                    
            connection.close()
            
            connection = sqlite3.connect("fci.db")
            results=connection.execute("SELECT MATERIAL_NAME,QUANTITY_BAGS,QUANTITY_NET_WT,RELEASED_BAGS,RELEASE_NET_WT FROM ISSUE_QUANTITY_DTLS WHERE ISSUE_ID= '"+str(self.dr_id)+"' LIMIT 1")       
            for x in results:
                 self.comboBox_2.setCurrentText(str(x[0]))  #material
                 self.lineEdit_2.setText(str(str(x[2]))) # issue net wt
                 self.lineEdit_4.setText(str(str(x[1]))) # issue bags
                 self.label_5.setText(str(str(x[3])))  #Release weight
                 self.label_9.setText(str(str(x[4])))  #Released bags
                 self.pushButton_10.setDisabled(True) #Add
                 self.pushButton_12.setEnabled(True) #save
                 self.pushButton_11.setEnabled(True) #Delete
                 self.pushButton_14.setEnabled(True) #refresh
                 
            connection.close()
            
            self.pushButton_3.setEnabled(True)
            self.pushButton_4.setEnabled(True)
            self.pushButton.setDisabled(True)
            self.pushButton_7.setEnabled(True)
            
            
            
            self.label_21.hide()
            self.select_all_data2()
           
        else:    
            self.label_21.setText("Please Select the record.")
            self.label_21.show()
    
    def EXP_DT_on_click(self):
        self.calendarWidget_2.show()
    
    def ISSUE_DT_on_click(self):
        self.calendarWidget.show()
    
    def calendar_on_click(self): 
        self.label_4.setText(str(self.calendarWidget.selectedDate().toString(QtCore.Qt.ISODate)))
        self.calendarWidget.hide()
        
    def calendar_2_on_click(self): 
        self.label_6.setText(str(self.calendarWidget_2.selectedDate().toString(QtCore.Qt.ISODate)))
        self.calendarWidget_2.hide()
        
        
      
    def load_data(self):        
        if(self.operation_flg=="ADD"):
                #print("inside Add ")
                self.add_data()
        elif(self.operation_flg=="EDIT"):
                #print("inside edit ")
                self.edit_data()
        elif(self.operation_flg=="DELETE"):
                #print("inside delete ")
                self.delete_data()
        else:
                print("Invalid Operation.")
         
    def add_click(self):
        self.operation_flg="ADD"       
        self.load_data()
        
    def add_data(self):        
            self.validation()
            self.duplicate_check()
            if(str(self.goAhead)=="Yes"):
                    connection = sqlite3.connect("fci.db")
                    with connection:        
                            cursor = connection.cursor()
                            cursor.execute("INSERT INTO ISSUE_MST(ORDER_ID, TOTAL_NET_WT_DEMAND,EXPIRY_DATE,ISSUE_DATE,TOTAL_BAGS_DEMAND,STATUS,CONTRACTOR_NAME ,RO_TYPE,DEVICE_ID) VALUES('"+self.lineEdit_10.text()+"','"+self.lineEdit.text()+"','"+self.label_6.text()+"','"+self.label_4.text()+"','"+self.label_7.text()+"','"+self.label_8.text()+"','"+self.comboBox.currentText()+"','"+self.lineEdit_3.text()+"','"+str(self.device_id)+"')")                    
                    connection.commit();                    
                    connection.close()
                    
                    connection = sqlite3.connect("fci.db")
                    with connection:        
                            cursor = connection.cursor()
                            #print ("INSERT INTO ISSUE_QUANTITY_DTLS(MATERIAL_NAME,QUANTITY_BAGS,QUANTITY_NET_WT,RELEASED_BAGS,RELEASE_NET_WT)  SELECT MATERIAL_NAME,QUANTITY_BAGS,QUANTITY_NET_WT,RELEASED_BAGS,RELEASE_NET_WT FROM ISSUE_QUANTITY_DTLS_TMP")
                            #print("UPDATE ISSUE_QUANTITY_DTLS SET ISSUE_ID=(SELECT MAX(ISSUE_ID) FROM ISSUE_QUANTITY_DTLS), WHERE ISSUE_ID IS NULL ")                    
                   
                            
                            cursor.execute("INSERT INTO ISSUE_QUANTITY_DTLS(MATERIAL_NAME,QUANTITY_BAGS,QUANTITY_NET_WT,RELEASED_BAGS,RELEASE_NET_WT)  SELECT MATERIAL_NAME,QUANTITY_BAGS,QUANTITY_NET_WT,RELEASED_BAGS,RELEASE_NET_WT FROM ISSUE_QUANTITY_DTLS_TMP")
                            cursor.execute("UPDATE ISSUE_QUANTITY_DTLS SET ISSUE_ID=(SELECT MAX(ISSUE_ID) FROM ISSUE_MST) ,DEVICE_ID=(SELECT DEVICE_ID FROM GLOBAL_VAR) WHERE ISSUE_ID IS NULL ")                    
                   
                            
                   
                    connection.commit();                    
                    connection.close()
                  
                    self.label_21.setText("Record Added Successfully.")
                    self.log_audit("Batches","Added New Issue :" +str(self.lineEdit_10.text()))
                    self.label_21.show()
                    self.select_all_data()
                    self.select_all_data2()
       
            
        
    
    def edit_click(self):
        row = self.tableWidget.currentRow()     
        if(row != -1 ):
            self.operation_flg="EDIT"
            self.load_data()
        else:    
            self.label_21.setText("Please Select the record.")
            self.label_21.show() 
    
    def edit_data(self):
        if(self.lineEdit_10.text() != ""):
            self.validation()
            self.duplicate_check()
            if(str(self.goAhead)=="Yes"):
                    connection = sqlite3.connect("fci.db")
                    with connection:        
                            cursor = connection.cursor()
                            cursor.execute("UPDATE ISSUE_MST SET ORDER_ID='"+self.lineEdit_10.text()+"', TOTAL_NET_WT_DEMAND='"+self.lineEdit.text()+"',EXPIRY_DATE='"+self.label_6.text()+"',ISSUE_DATE='"+self.label_4.text()+"',TOTAL_BAGS_DEMAND='"+self.label_7.text()+"',CONTRACTOR_NAME ='"+self.comboBox.currentText()+"',RO_TYPE='"+self.lineEdit_3.text()+"',STATUS='"+self.label_8.text()+"', DEVICE_ID='"+str(self.device_id)+"' , UPLOAD_STATUS = null  WHERE  ISSUE_ID ='"+str(self.dr_id)+"'")
                            
                    connection.commit();                    
                    connection.close()
                    
                    connection = sqlite3.connect("fci.db")
                    with connection:        
                            cursor = connection.cursor()
                            cursor.execute("DELETE FROM ISSUE_QUANTITY_DTLS WHERE ISSUE_ID='"+str(self.dr_id)+"'") 
                            cursor.execute("INSERT INTO ISSUE_QUANTITY_DTLS(ISSUE_ID,MATERIAL_NAME,QUANTITY_BAGS,QUANTITY_NET_WT,RELEASED_BAGS,RELEASE_NET_WT)  SELECT '"+str(self.dr_id)+"' as ISSUE_ID,MATERIAL_NAME,QUANTITY_BAGS,QUANTITY_NET_WT,RELEASED_BAGS,RELEASE_NET_WT FROM ISSUE_QUANTITY_DTLS_TMP")                    
                   
                    connection.commit();                    
                    connection.close() 
       
                    self.label_21.setText("Record Saved Successfully.")
                    self.log_audit("Batches","Updated Issue order ID :"+str(self.dr_id))
                    self.label_21.show()
                    self.select_all_data()
                    self.select_all_data2()
    
    def validation(self):
        self.goAhead="No"
        if(self.lineEdit_10.text() == ""):
                self.label_21.setText("Order.Id Is Empty.")               
                self.label_21.show()        
        elif(self.lineEdit.text() == ""):
                self.label_21.setText("Demanded Net  Weight Is Empty.")               
                self.label_21.show()         
        elif(self.lineEdit.text() == "0"):
                self.label_21.setText("Demanded Net Weight should be greater than 0.")               
                self.label_21.show()  
        else:
                self.goAhead="Yes"
        
    def duplicate_check(self):
        if(self.lineEdit_10.text() != ""):
                connection = sqlite3.connect("fci.db")
                results=connection.execute("select count(*) from ISSUE_MST WHERE ORDER_ID = '"+self.label_5.text()+"' and ISSUE_ID !='"+str(self.dr_id)+"' ")       
                for x in results: 
                      if(int(x[0]) > 0):
                          self.label_21.setText("Order Id Is Already Exist.")               
                          self.label_21.show()
                          self.goAhead="No"
                connection.close()
    def delete_click(self):
        row = self.tableWidget.currentRow()     
        if(row != -1 ):
            self.operation_flg="DELETE"
            self.load_data()
        else:    
            self.label_21.setText("Please Select the record.")
            self.label_21.show()        
     
      
    def delete_data(self):
        if(self.lineEdit_10.text() != ""):
            connection = sqlite3.connect("fci.db")
            with connection:        
                    cursor = connection.cursor()
                    cursor.execute("DELETE FROM ISSUE_MST WHERE ISSUE_ID ='"+str(self.dr_id)+"'")
                    cursor.execute("DELETE FROM ISSUE_QUANTITY_DTLS WHERE ISSUE_ID='"+str(self.dr_id)+"'") 
            connection.commit();                    
            connection.close()
            
            self.label_21.setText("Record Deleted Successfully.")
            self.log_audit("Batches","Deleted ISSUE Order ID :" +str(self.lineEdit_10.text()))
            self.label_21.show()
            
            
        self.select_all_data() 
        
        
    def select_all_data(self):     
            self.delete_all_records()        
            font = QtGui.QFont()
            font.setPointSize(10)
            self.tableWidget.setFont(font) 
            self.tableWidget.horizontalHeader().setStretchLastSection(True)
          
            self.tableWidget.setHorizontalHeaderLabels(['Issue. Id','Release Order Id.', ' Demanded Quantity(Ton) ', 'Expiry Date', 'Issue Date','Demanded  Bag.Count' ,'Status','Contractor Name','RO TYPE'])        
               
            connection = sqlite3.connect("fci.db")
            results=connection.execute("select ISSUE_ID,ORDER_ID, TOTAL_NET_WT_DEMAND,EXPIRY_DATE,ISSUE_DATE,TOTAL_BAGS_DEMAND,IFNULL(STATUS,'Pending'),CONTRACTOR_NAME ,RO_TYPE from ISSUE_MST")                        
            for row_number, row_data in enumerate(results):            
                self.tableWidget.insertRow(row_number)
                for column_number, data in enumerate(row_data):
                    self.tableWidget.setItem(row_number,column_number,QTableWidgetItem(str (data)))
                    #self.lineEdit.setText("")
            connection.close()   
            self.tableWidget.resizeColumnsToContents()
            self.tableWidget.resizeRowsToContents()
            self.tableWidget.horizontalHeader().setStretchLastSection(True)
            self.tableWidget.setEditTriggers(QtWidgets.QTableWidget.NoEditTriggers)
            
        
    def delete_all_records(self):
            i = self.tableWidget.rowCount()       
            while (i>0):             
                i=i-1
                self.tableWidget.removeRow(i)
                
                
                
    def select_all_data2(self):     
            self.delete_all_records2()        
            font = QtGui.QFont()
            font.setPointSize(10)
            self.tableWidget_2.setFont(font) 
            self.tableWidget_2.horizontalHeader().setStretchLastSection(True)
          
            self.tableWidget_2.setHorizontalHeaderLabels(['Material', ' Demanded Quantity(Ton) ','Demanded  Bag.Count' ,'Released Wt Ton','Released Bags','ID'])        
               
            connection = sqlite3.connect("fci.db")
            results=connection.execute("select MATERIAL_NAME,QUANTITY_NET_WT, QUANTITY_BAGS, RELEASE_NET_WT,RELEASED_BAGS,ID from ISSUE_QUANTITY_DTLS_TMP")                        
            for row_number, row_data in enumerate(results):            
                self.tableWidget_2.insertRow(row_number)
                for column_number, data in enumerate(row_data):
                    self.tableWidget_2.setItem(row_number,column_number,QTableWidgetItem(str (data)))
                    #self.lineEdit.setText("")
            connection.close()   
            self.tableWidget_2.resizeColumnsToContents()
            self.tableWidget_2.resizeRowsToContents()
            self.tableWidget_2.horizontalHeader().setStretchLastSection(True)
            self.tableWidget_2.setEditTriggers(QtWidgets.QTableWidget.NoEditTriggers)
            
        
    def delete_all_records2(self):
            i = self.tableWidget_2.rowCount()       
            while (i>0):             
                i=i-1
                self.tableWidget_2.removeRow(i)
                
   
    def reset_fun2(self):
        self.dr_id2=""        
        self.lineEdit_2.setText("") # issue net wt
        self.lineEdit_4.setText("") # issue bags
        self.label_5.setText("0.000")  #Release weight
        self.label_9.setText("0")  #Released bags
        
        
        self.pushButton_10.setEnabled(True)
        self.pushButton_12.setDisabled(True)
        self.pushButton_11.setDisabled(True)
        self.pushButton_14.setEnabled(True)
        self.label_33.hide()
        self.label_21.hide()
        
        #self.delete_data2_all()
        self.select_all_data2()
        
     
        
    def fetch_data_from_tw2(self):
        #self.lineEdit_10.setText("ok fname")
        row = self.tableWidget_2.currentRow()     
        if(row != -1 ):
            self.dr_id2=str(self.tableWidget_2.item(row, 0).text())
            self.comboBox_2.setCurrentText(str(self.tableWidget_2.item(row, 0).text()))  #material
            self.lineEdit_2.setText(str(self.tableWidget_2.item(row, 1).text())) # issue net wt
            self.lineEdit_4.setText(str(self.tableWidget_2.item(row, 2).text())) # issue bags
            self.label_5.setText(str(self.tableWidget_2.item(row, 3).text()))  #Release weight
            self.label_9.setText(str(self.tableWidget_2.item(row, 4).text()))  #Released bags
            self.rec_id=str(self.tableWidget_2.item(row, 5).text())
            
           
            
            
            self.pushButton_10.setDisabled(True) #Add
            self.pushButton_12.setEnabled(True) #save
            self.pushButton_11.setEnabled(True) #Delete
            self.pushButton_14.setEnabled(True) #refresh
            #self.select_all_data2()
           
        else:    
            self.label_33.setText("Please Select the record.")
            self.label_33.show()
    
    def load_data2(self):        
        if(self.operation_flg=="ADD"):
                #print("inside Add ")
                self.add_data2()
        elif(self.operation_flg=="EDIT"):
                #print("inside edit ")
                self.edit_data2()
        elif(self.operation_flg=="DELETE"):
                #print("inside delete ")
                self.delete_data2()
        else:
                print("Invalid Operation.")
         
    def add_click2(self):
        self.operation_flg="ADD"       
        self.load_data2()
        
    def add_data2(self):
        self.validation_fun2()
        if(self.goAhead=="Yes"):            
            connection = sqlite3.connect("fci.db")
            with connection:        
                    cursor = connection.cursor()
                    cursor.execute("INSERT INTO ISSUE_QUANTITY_DTLS_TMP(MATERIAL_NAME,QUANTITY_BAGS,QUANTITY_NET_WT,RELEASED_BAGS,RELEASE_NET_WT) VALUES('"+str(self.comboBox_2.currentText())+"','"+self.lineEdit_4.text()+"','"+self.lineEdit_2.text()+"','"+self.label_9.text()+"','"+self.label_5.text()+"')")                    
            connection.commit();                    
            connection.close() 
          
            self.label_33.setText("Record Added Successfully.")           
            self.label_33.show()
            self.select_all_data2()
    
    def edit_click2(self):
        row = self.tableWidget_2.currentRow()     
        if(row != -1 ):
            self.operation_flg="EDIT"
            self.load_data2()
        else:    
            self.label_33.setText("Please Select the record.")
            self.label_33.show() 
    
    def edit_data2(self):       
        if(self.rec_id != "0"):
            self.validation_fun2()
            if(self.goAhead=="Yes"):
                    connection = sqlite3.connect("fci.db")
                    with connection:        
                            cursor = connection.cursor()
                            cursor.execute("UPDATE ISSUE_QUANTITY_DTLS_TMP  SET MATERIAL_NAME='"+str(self.comboBox_2.currentText())+"',QUANTITY_BAGS='"+self.lineEdit_4.text()+"',QUANTITY_NET_WT='"+self.lineEdit_2.text()+"',RELEASED_BAGS='"+self.label_9.text()+"',RELEASE_NET_WT ='"+self.label_5.text()+"'  WHERE  ID ='"+str(self.rec_id)+"'")                    
                    connection.commit();                    
                    connection.close()
                    self.label_33.setText("Record Saved Successfully.")      
                    self.label_33.show()       
                    self.select_all_data2()
            
       
        
    def validation_fun2(self):
        self.goAhead="No"
        
        if(self.lineEdit_2.text() == ""):
            self.label_33.setText("Net Weight Should not empty.")      
            self.label_33.show()
        elif(self.lineEdit_4.text() == ""):
            self.label_33.setText("No.Of Bags Should not empty.")      
            self.label_33.show()
        else:
            self.goAhead="Yes"
        
        rec_count=0 
        connection = sqlite3.connect("fci.db")
        results=connection.execute("SELECT count(*) from ISSUE_QUANTITY_DTLS_TMP ") 
        for x in results:
            rec_count=int(x[0])
        connection.close()
        
        if(rec_count > 0): 
            connection = sqlite3.connect("fci.db")
            results=connection.execute("SELECT count(*) from ISSUE_QUANTITY_DTLS_TMP where MATERIAL_NAME = '"+str(self.comboBox_2.currentText())+"' and  ID != '"+str(self.rec_id)+"'") 
            for x in results:
                if(int(x[0])==1):
                    self.goAhead="No"
                    self.label_33.setText("Material Is already Exist.")      
                    self.label_33.show()
                else:
                   self.goAhead="Yes"
            connection.close()
        
            
    def delete_click2(self):
        row = self.tableWidget_2.currentRow()     
        if(row != -1 ):
            self.operation_flg="DELETE"
            self.load_data2()
        else:    
            self.label_33.setText("Please Select the record.")
            self.label_33.show()        
     
      
    def delete_data2(self):
        if(self.rec_id != "0"):
            connection = sqlite3.connect("fci.db")
            with connection:        
                    cursor = connection.cursor()
                    cursor.execute("DELETE FROM ISSUE_QUANTITY_DTLS_TMP WHERE ID ='"+str(self.rec_id)+"'")                    
            connection.commit();                    
            connection.close()
            
            self.label_33.setText("Record Deleted Successfully.")           
            self.label_33.show()
        
        self.select_all_data2()
        
    def delete_data2_all(self):       
        connection = sqlite3.connect("fci.db")
        with connection:        
                cursor = connection.cursor()
                cursor.execute("DELETE FROM ISSUE_QUANTITY_DTLS_TMP ")                    
        connection.commit();                    
        connection.close()
        
    def log_audit(self,event_name,desc_str):        
        connection = sqlite3.connect("fci.db")
        with connection:        
            cursor = connection.cursor()       
            cursor.execute("INSERT INTO AUDIT_MST(AUDIT_TYPE,MESSAGE) VALUES(?,?)",(event_name,desc_str))
            cursor.execute("UPDATE AUDIT_MST SET USER_ID = (SELECT LOGIN_USER_ID FROM GLOBAL_VAR) WHERE USER_ID IS NULL")
            
        connection.commit();
        connection.close()

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = fci_05_Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
