# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'fci_03b_weighing_storage_batch.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import datetime
import time
import sqlite3
from PyQt5.QtCore import QRegExp
from PyQt5.QtGui import QRegExpValidator
import re
import os,sys
import serial,time


class fci_03b_Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1366, 769)
        MainWindow.setBaseSize(QtCore.QSize(0, 0))
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.frame = QtWidgets.QFrame(self.centralwidget)
        self.frame.setGeometry(QtCore.QRect(20, 20, 1321, 701))
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.label = QtWidgets.QLabel(self.frame)
        self.label.setGeometry(QtCore.QRect(780, 10, 91, 31))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.lineEdit = QtWidgets.QLineEdit(self.frame)
        reg_ex = QRegExp("\d+")
        input_validator = QRegExpValidator(reg_ex, self.lineEdit)
        self.lineEdit.setValidator(input_validator)
        self.lineEdit.setGeometry(QtCore.QRect(880, 10, 131, 31))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        self.lineEdit.setFont(font)
        self.lineEdit.setObjectName("lineEdit")
        self.pushButton_5 = QtWidgets.QPushButton(self.frame)
        self.pushButton_5.setGeometry(QtCore.QRect(270, 660, 131, 31))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        self.pushButton_5.setFont(font)
        self.pushButton_5.setObjectName("pushButton_5")
        self.pushButton_6 = QtWidgets.QPushButton(self.frame)
        self.pushButton_6.setGeometry(QtCore.QRect(430, 660, 121, 31))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        self.pushButton_6.setFont(font)
        self.pushButton_6.setObjectName("pushButton_6")
        self.pushButton_7 = QtWidgets.QPushButton(self.frame)
        self.pushButton_7.setGeometry(QtCore.QRect(730, 660, 101, 31))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        self.pushButton_7.setFont(font)
        self.pushButton_7.setObjectName("pushButton_7")
        self.label_20 = QtWidgets.QLabel(self.frame)
        self.label_20.setGeometry(QtCore.QRect(20, 10, 81, 31))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        font.setBold(False)
        font.setUnderline(False)
        font.setWeight(50)
        self.label_20.setFont(font)
        #self.label_20.setStyleSheet("color: rgb(170, 85, 127);")
        self.label_20.setAlignment(QtCore.Qt.AlignCenter)
        self.label_20.setObjectName("label_20")
        self.label_19 = QtWidgets.QLabel(self.frame)
        self.label_19.setGeometry(QtCore.QRect(110, 10, 91, 31))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        font.setBold(True)
        font.setUnderline(False)
        font.setWeight(75)
        self.label_19.setFont(font)
        self.label_19.setStyleSheet("color: rgb(0, 0, 255);")
        self.label_19.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_19.setObjectName("label_19")
        self.pushButton_9 = QtWidgets.QPushButton(self.frame)
        self.pushButton_9.setGeometry(QtCore.QRect(1030, 10, 71, 31))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        self.pushButton_9.setFont(font)
        self.pushButton_9.setObjectName("pushButton_9")
        self.label_14 = QtWidgets.QLabel(self.frame)
        self.label_14.setGeometry(QtCore.QRect(320, 280, 91, 71))
        font = QtGui.QFont()
        font.setFamily("MS Sans Serif")
        font.setPointSize(10)
        font.setBold(True)
        font.setUnderline(False)
        font.setWeight(75)
        self.label_14.setFont(font)
        #self.label_14.setStyleSheet("color: rgb(170, 85, 127);")
        self.label_14.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_14.setObjectName("label_14")
        self.pushButton_8 = QtWidgets.QPushButton(self.frame)
        self.pushButton_8.setGeometry(QtCore.QRect(590, 660, 101, 31))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        self.pushButton_8.setFont(font)
        self.pushButton_8.setObjectName("pushButton_8")
        
        self.listWidget_2 = QtWidgets.QListWidget(self.frame)
        self.listWidget_2.setStyleSheet("background-color: rgb(189, 255, 255);")
        self.listWidget_2.setGeometry(QtCore.QRect(1110, 400, 171, 271))
        font = QtGui.QFont()
        font.setFamily("MS Sans Serif")
        font.setPointSize(10)
        self.listWidget_2.setFont(font)
        self.listWidget_2.setObjectName("listWidget_2")
        
        
        self.radioButton = QtWidgets.QRadioButton(self.frame)
        self.radioButton.setGeometry(QtCore.QRect(270, 190, 71, 41))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.radioButton.setFont(font)
        self.radioButton.setChecked(True)
        self.radioButton.setObjectName("radioButton")
        self.radioButton_2 = QtWidgets.QRadioButton(self.frame)
        self.radioButton_2.setGeometry(QtCore.QRect(350, 190, 81, 41))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.radioButton_2.setFont(font)
        self.radioButton_2.setObjectName("radioButton_2")
        
        self.listWidget_3 = QtWidgets.QListWidget(self.frame)
        self.listWidget_3.setStyleSheet("background-color: rgb(189, 255, 255);")
        self.listWidget_3.setGeometry(QtCore.QRect(20, 360, 171, 301))
        font = QtGui.QFont()
        font.setFamily("MS Sans Serif")
        font.setPointSize(10)
        self.listWidget_3.setFont(font)
        self.listWidget_3.setObjectName("listWidget_3")
        
        
        self.label_22 = QtWidgets.QLabel(self.frame)
        self.label_22.setGeometry(QtCore.QRect(20, 320, 161, 31))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        font.setBold(True)
        font.setUnderline(False)
        font.setWeight(75)
        self.label_22.setFont(font)
        self.label_22.setStyleSheet("color: rgb(0, 0, 255);")
        self.label_22.setAlignment(QtCore.Qt.AlignCenter)
        self.label_22.setObjectName("label_22")
        self.label_23 = QtWidgets.QLabel(self.frame)
        self.label_23.setGeometry(QtCore.QRect(1100, 360, 171, 31))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        font.setBold(True)
        font.setUnderline(False)
        font.setWeight(75)
        self.label_23.setFont(font)
        self.label_23.setStyleSheet("color: rgb(0, 0, 255);")
        self.label_23.setAlignment(QtCore.Qt.AlignCenter)
        self.label_23.setObjectName("label_23")
        self.label_24 = QtWidgets.QLineEdit(self.frame)
        
        reg_ex = QRegExp("\d+")
        input_validator = QRegExpValidator(reg_ex, self.label_24)
        self.label_24.setValidator(input_validator)
        
        self.label_24.setGeometry(QtCore.QRect(920, 280, 61, 31))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        font.setBold(True)
        font.setUnderline(False)
        font.setWeight(75)
        self.label_24.setFont(font)
        self.label_24.setStyleSheet("color: rgb(0, 0, 255);")
        self.label_24.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_24.setObjectName("label_24")
        self.label_25 = QtWidgets.QLabel(self.frame)
        self.label_25.setGeometry(QtCore.QRect(470, 60, 111, 31))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        font.setBold(False)
        font.setUnderline(False)
        font.setWeight(50)
        self.label_25.setFont(font)
        #self.label_25.setStyleSheet("color: rgb(170, 85, 127);")
        self.label_25.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_25.setObjectName("label_25")
        self.label_26 = QtWidgets.QLabel(self.frame)
        self.label_26.setGeometry(QtCore.QRect(470, 100, 111, 31))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        font.setBold(False)
        font.setUnderline(False)
        font.setWeight(50)
        self.label_26.setFont(font)
        #self.label_26.setStyleSheet("color: rgb(170, 85, 127);")
        self.label_26.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_26.setObjectName("label_26")
        self.label_27 = QtWidgets.QLabel(self.frame)
        self.label_27.setGeometry(QtCore.QRect(470, 140, 121, 31))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        font.setBold(False)
        font.setUnderline(False)
        font.setWeight(50)
        self.label_27.setFont(font)
        #self.label_27.setStyleSheet("color: rgb(170, 85, 127);")
        self.label_27.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_27.setObjectName("label_27")
        self.label_28 = QtWidgets.QLabel(self.frame)
        self.label_28.setGeometry(QtCore.QRect(470, 180, 121, 31))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        font.setBold(False)
        font.setUnderline(False)
        font.setWeight(50)
        self.label_28.setFont(font)
        #self.label_28.setStyleSheet("color: rgb(170, 85, 127);")
        self.label_28.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_28.setObjectName("label_28")
        self.line = QtWidgets.QFrame(self.frame)
        self.line.setGeometry(QtCore.QRect(720, 60, 20, 161))
        self.line.setFrameShape(QtWidgets.QFrame.VLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.label_29 = QtWidgets.QLabel(self.frame)
        self.label_29.setGeometry(QtCore.QRect(610, 60, 91, 31))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        font.setBold(True)
        font.setUnderline(False)
        font.setWeight(75)
        self.label_29.setFont(font)
        self.label_29.setStyleSheet("color: rgb(0, 0, 255);")
        self.label_29.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_29.setObjectName("label_29")
        self.label_30 = QtWidgets.QLabel(self.frame)
        self.label_30.setGeometry(QtCore.QRect(610, 100, 91, 31))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        font.setBold(True)
        font.setUnderline(False)
        font.setWeight(75)
        self.label_30.setFont(font)
        self.label_30.setStyleSheet("color: rgb(0, 0, 255);")
        self.label_30.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_30.setObjectName("label_30")
        self.label_31 = QtWidgets.QLabel(self.frame)
        self.label_31.setGeometry(QtCore.QRect(610, 140, 91, 31))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        font.setBold(True)
        font.setUnderline(False)
        font.setWeight(75)
        self.label_31.setFont(font)
        self.label_31.setStyleSheet("color: rgb(0, 0, 255);")
        self.label_31.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_31.setObjectName("label_31")
        self.label_32 = QtWidgets.QLabel(self.frame)
        self.label_32.setGeometry(QtCore.QRect(610, 180, 111, 31))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(22)
        font.setBold(False)
        font.setUnderline(False)
        font.setWeight(50)
        self.label_32.setFont(font)
        self.label_32.setStyleSheet("background-color: rgb(255, 170, 255);")
        self.label_32.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_32.setObjectName("label_32")
        self.label_33 = QtWidgets.QLabel(self.frame)
        self.label_33.setGeometry(QtCore.QRect(750, 60, 131, 31))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        font.setBold(False)
        font.setUnderline(False)
        font.setWeight(50)
        self.label_33.setFont(font)
        #self.label_33.setStyleSheet("color: rgb(170, 85, 127);")
        self.label_33.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_33.setObjectName("label_33")
        self.label_34 = QtWidgets.QLabel(self.frame)
        self.label_34.setGeometry(QtCore.QRect(750, 100, 131, 31))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        font.setBold(False)
        font.setUnderline(False)
        font.setWeight(50)
        self.label_34.setFont(font)
        #self.label_34.setStyleSheet("color: rgb(170, 85, 127);")
        self.label_34.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_34.setObjectName("label_34")
        self.label_35 = QtWidgets.QLabel(self.frame)
        self.label_35.setGeometry(QtCore.QRect(750, 140, 141, 31))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        font.setBold(False)
        font.setUnderline(False)
        font.setWeight(50)
        self.label_35.setFont(font)
        #self.label_35.setStyleSheet("color: rgb(170, 85, 127);")
        self.label_35.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_35.setObjectName("label_35")
        self.label_36 = QtWidgets.QLabel(self.frame)
        self.label_36.setGeometry(QtCore.QRect(750, 180, 151, 31))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        font.setBold(False)
        font.setUnderline(False)
        font.setWeight(50)
        self.label_36.setFont(font)
        #self.label_36.setStyleSheet("color: rgb(170, 85, 127);")
        self.label_36.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_36.setObjectName("label_36")
        self.label_37 = QtWidgets.QLabel(self.frame)
        self.label_37.setGeometry(QtCore.QRect(910, 60, 91, 31))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        font.setBold(True)
        font.setUnderline(False)
        font.setWeight(75)
        self.label_37.setFont(font)
        self.label_37.setStyleSheet("color: rgb(0, 0, 255);")
        self.label_37.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_37.setObjectName("label_37")
        self.label_38 = QtWidgets.QLabel(self.frame)
        self.label_38.setGeometry(QtCore.QRect(910, 100, 91, 31))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        font.setBold(True)
        font.setUnderline(False)
        font.setWeight(75)
        self.label_38.setFont(font)
        self.label_38.setStyleSheet("color: rgb(0, 0, 255);")
        self.label_38.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_38.setObjectName("label_38")
        self.label_39 = QtWidgets.QLabel(self.frame)
        self.label_39.setGeometry(QtCore.QRect(910, 140, 91, 31))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        font.setBold(True)
        font.setUnderline(False)
        font.setWeight(75)
        self.label_39.setFont(font)
        self.label_39.setStyleSheet("color: rgb(0, 0, 255);")
        self.label_39.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_39.setObjectName("label_39")
        self.label_40 = QtWidgets.QLabel(self.frame)
        self.label_40.setGeometry(QtCore.QRect(910, 180, 111, 31))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(22)
        font.setBold(False)
        font.setUnderline(False)
        font.setWeight(50)
        self.label_40.setFont(font)
        self.label_40.setStyleSheet("background-color: rgb(255, 170, 255);")
        self.label_40.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_40.setObjectName("label_40")
        self.lcdNumber = QtWidgets.QLCDNumber(self.frame)
        self.lcdNumber.setGeometry(QtCore.QRect(30, 50, 361, 121))
        self.lcdNumber.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.lcdNumber.setStyleSheet("background-color: rgb(0, 0, 0);\n"
"font: 10pt \"MS Sans Serif\";\n"
"color: rgb(255, 0, 0);")
        self.lcdNumber.setProperty("value", 20000.0)
        self.lcdNumber.setObjectName("lcdNumber")
        self.pushButton_11 = QtWidgets.QPushButton(self.frame)
        self.pushButton_11.setGeometry(QtCore.QRect(30, 190, 91, 41))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        self.pushButton_11.setFont(font)
        self.pushButton_11.setObjectName("pushButton_11")
        self.pushButton_16 = QtWidgets.QPushButton(self.frame)
        self.pushButton_16.setGeometry(QtCore.QRect(160, 190, 71, 41))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        self.pushButton_16.setFont(font)
        self.pushButton_16.setObjectName("pushButton_16")
        self.lineEdit_2 = QtWidgets.QLineEdit(self.frame)
        self.lineEdit_2.setGeometry(QtCore.QRect(460, 280, 261, 71))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(24)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.lineEdit_2.setFont(font)
        self.lineEdit_2.setStyleSheet("background-color: rgb(255, 170, 255);\n"
"font: 24pt \"MS Shell Dlg 2\";")
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.line_2 = QtWidgets.QFrame(self.frame)
        self.line_2.setGeometry(QtCore.QRect(460, 220, 551, 16))
        self.line_2.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_2.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_2.setObjectName("line_2")
        self.label_44 = QtWidgets.QLabel(self.frame)
        self.label_44.setGeometry(QtCore.QRect(750, 230, 151, 31))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        font.setBold(False)
        font.setUnderline(False)
        font.setWeight(50)
        self.label_44.setFont(font)
        #self.label_44.setStyleSheet("color: rgb(170, 85, 127);")
        self.label_44.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_44.setObjectName("label_44")
        self.label_45 = QtWidgets.QLabel(self.frame)
        self.label_45.setGeometry(QtCore.QRect(920, 230, 71, 31))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        font.setBold(True)
        font.setUnderline(False)
        font.setWeight(75)
        self.label_45.setFont(font)
        self.label_45.setStyleSheet("color: rgb(0, 0, 255);")
        self.label_45.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_45.setObjectName("label_45")
        self.label_21 = QtWidgets.QLabel(self.frame)
        self.label_21.setGeometry(QtCore.QRect(750, 280, 151, 31))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        font.setBold(False)
        font.setUnderline(False)
        font.setWeight(50)
        self.label_21.setFont(font)
        #self.label_21.setStyleSheet("color: rgb(170, 85, 127);")
        self.label_21.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_21.setObjectName("label_21")
        self.label_47 = QtWidgets.QLabel(self.frame)
        self.label_47.setGeometry(QtCore.QRect(1160, 10, 151, 31))
        font = QtGui.QFont()
        font.setFamily("MS Sans Serif")
        font.setPointSize(10)        
        self.label_47.setFont(font)
        self.label_47.setStyleSheet("color: rgb(170, 0, 255);")
        self.label_47.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_47.setObjectName("label_47")
        self.label_41 = QtWidgets.QLabel(self.frame)
        self.label_41.setGeometry(QtCore.QRect(750, 320, 151, 31))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        font.setBold(False)
        font.setUnderline(False)
        font.setWeight(50)
        self.label_41.setFont(font)
        #self.label_41.setStyleSheet("color: rgb(170, 85, 127);")
        self.label_41.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_41.setObjectName("label_41")
        self.label_48 = QtWidgets.QLabel(self.frame)
        self.label_48.setGeometry(QtCore.QRect(920, 320, 51, 31))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        font.setBold(True)
        font.setUnderline(False)
        font.setWeight(75)
        self.label_48.setFont(font)
        self.label_48.setStyleSheet("color: rgb(0, 0, 255);")
        self.label_48.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_48.setObjectName("label_48")
        self.label_51 = QtWidgets.QLabel(self.frame)
        self.label_51.setGeometry(QtCore.QRect(1090, 330, 61, 31))
        font = QtGui.QFont()
        font.setFamily("MS Sans Serif")
        font.setPointSize(10)
        font.setBold(True)
        font.setUnderline(False)
        font.setWeight(75)
        self.label_51.setFont(font)
        #self.label_51.setStyleSheet("color: rgb(170, 85, 127);")
        self.label_51.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignTop)
        self.label_51.setObjectName("label_51")
        
        self.buttongroup = QtWidgets.QButtonGroup()
        
        self.radioButton_3 = QtWidgets.QRadioButton(self.frame)
        self.radioButton_3.setGeometry(QtCore.QRect(1160, 330, 41, 21))
        font = QtGui.QFont()
        font.setFamily("MS Sans Serif")
        font.setPointSize(10)
        self.radioButton_3.setFont(font)
        self.radioButton_3.setChecked(False)
        self.radioButton_3.setObjectName("radioButton_3")
        
        self.radioButton_4 = QtWidgets.QRadioButton(self.frame)
        self.radioButton_4.setGeometry(QtCore.QRect(1220, 330, 51, 21))
        font = QtGui.QFont()
        font.setFamily("MS Sans Serif")
        font.setPointSize(10)
        self.radioButton_4.setFont(font)
        self.radioButton_4.setObjectName("radioButton_4")
        
        self.buttongroup.addButton(self.radioButton_3, 1)
        self.buttongroup.addButton(self.radioButton_4, 2)
        
        self.groupBox = QtWidgets.QGroupBox(self.frame)
        self.groupBox.setGeometry(QtCore.QRect(240, 380, 721, 261))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.groupBox.setFont(font)
        self.groupBox.setObjectName("groupBox")
        self.label_15 = QtWidgets.QLabel(self.groupBox)
        self.label_15.setGeometry(QtCore.QRect(20, 40, 71, 31))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        font.setBold(False)
        font.setUnderline(False)
        font.setWeight(50)
        self.label_15.setFont(font)
        #self.label_15.setStyleSheet("color: rgb(170, 85, 127);")
        self.label_15.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_15.setObjectName("label_15")
        self.comboBox = QtWidgets.QComboBox(self.groupBox)
        self.comboBox.setGeometry(QtCore.QRect(150, 40, 151, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.comboBox.setFont(font)
        self.comboBox.setObjectName("comboBox")        
        self.label_17 = QtWidgets.QLabel(self.groupBox)
        self.label_17.setGeometry(QtCore.QRect(320, 40, 131, 31))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        font.setBold(False)
        font.setUnderline(False)
        font.setWeight(50)
        self.label_17.setFont(font)
        #self.label_17.setStyleSheet("color: rgb(170, 85, 127);")
        self.label_17.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_17.setObjectName("label_17")
        
        '''
        self.label_43 = QtWidgets.QLabel(self.groupBox)        
        self.label_43.setGeometry(QtCore.QRect(460, 40, 151, 31))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        font.setBold(True)
        font.setUnderline(False)
        font.setWeight(75)
        self.label_43.setFont(font)
        self.label_43.setStyleSheet("color: rgb(0, 0, 255);")
        self.label_43.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_43.setObjectName("label_43")
        '''
        self.stroagecombo = QtWidgets.QComboBox(self.groupBox)        
        self.stroagecombo.setGeometry(QtCore.QRect(460, 40, 151, 31))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        font.setBold(True)
        font.setUnderline(False)
        font.setWeight(75)
        self.stroagecombo.setFont(font)
        #self.stroagecombo.setStyleSheet("color: rgb(0, 0, 255);")
        #self.stroagecombo.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.stroagecombo.setObjectName("label_43")
        
        self.label_18 = QtWidgets.QLabel(self.groupBox)
        self.label_18.setGeometry(QtCore.QRect(20, 140, 121, 31))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        font.setBold(False)
        font.setUnderline(False)
        font.setWeight(50)
        self.label_18.setFont(font)
        #self.label_18.setStyleSheet("color: rgb(170, 85, 127);")
        self.label_18.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_18.setObjectName("label_18")
        self.lineEdit_3 = QtWidgets.QLineEdit(self.groupBox)
        self.lineEdit_3.setGeometry(QtCore.QRect(380, 110, 110, 41))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        font.setBold(True)        
        font.setWeight(50)
        self.lineEdit_3.setStyleSheet("background-color: rgb(189, 255, 255);\n"
"font: 24pt \"MS Shell Dlg 2\";")
        self.lineEdit_3.setMaxLength(5)
        self.lineEdit_3.setFont(font)
        self.lineEdit_3.setObjectName("lineEdit_3")
        self.label_16 = QtWidgets.QLabel(self.groupBox)
        self.label_16.setGeometry(QtCore.QRect(20, 90, 120, 31))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        font.setBold(False)
        font.setUnderline(False)
        font.setWeight(50)
        self.label_16.setFont(font)
        #self.label_16.setStyleSheet("color: rgb(170, 85, 127);")
        self.label_16.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_16.setObjectName("label_16")
        self.label_42 = QtWidgets.QLabel(self.groupBox)
        self.label_42.setGeometry(QtCore.QRect(150, 90, 141, 31))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        font.setBold(True)
        font.setUnderline(False)
        font.setWeight(75)
        self.label_42.setFont(font)
        self.label_42.setStyleSheet("color: rgb(0, 0, 255);")
        self.label_42.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_42.setObjectName("label_42")
        self.label_49 = QtWidgets.QLabel(self.groupBox)
        self.label_49.setGeometry(QtCore.QRect(20, 190, 131, 31))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        font.setBold(False)
        font.setUnderline(False)
        font.setWeight(50)
        self.label_49.setFont(font)
        #self.label_49.setStyleSheet("color: rgb(170, 85, 127);")
        self.label_49.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_49.setObjectName("label_49")
        self.label_50 = QtWidgets.QLabel(self.groupBox)
        self.label_50.setGeometry(QtCore.QRect(150, 190, 81, 31))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        font.setBold(True)
        font.setUnderline(False)
        font.setWeight(75)
        self.label_50.setFont(font)
        self.label_50.setStyleSheet("color: rgb(0, 0, 255);")
        self.label_50.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_50.setObjectName("label_50")
        self.label_46 = QtWidgets.QLabel(self.groupBox)
        self.label_46.setGeometry(QtCore.QRect(300, 110, 51, 31))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        font.setBold(False)
        font.setUnderline(False)
        font.setWeight(50)
        self.label_46.setFont(font)
        #self.label_46.setStyleSheet("color: rgb(170, 85, 127);")
        self.label_46.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_46.setObjectName("label_46")
        self.checkBox = QtWidgets.QCheckBox(self.groupBox)
        self.checkBox.setEnabled(True)
        self.checkBox.setGeometry(QtCore.QRect(300, 160, 191, 21))
        self.checkBox.setObjectName("checkBox")
        self.label_52 = QtWidgets.QLabel(self.groupBox)
        self.label_52.setEnabled(False)
        self.label_52.setGeometry(QtCore.QRect(300, 190, 71, 31))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        font.setBold(False)
        font.setUnderline(False)
        font.setWeight(50)
        self.label_52.setFont(font)
        #self.label_52.setStyleSheet("color: rgb(170, 85, 127);")
        self.label_52.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_52.setObjectName("label_52")
        self.lineEdit_4 = QtWidgets.QLineEdit(self.groupBox)
        self.lineEdit_4.setEnabled(False)
        self.lineEdit_4.setGeometry(QtCore.QRect(380, 190, 110, 41))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        font.setBold(True)        
        font.setWeight(50)
        self.lineEdit_4.setStyleSheet("background-color: rgb(189, 255, 255);\n"
"font: 24pt \"MS Shell Dlg 2\";")
        self.lineEdit_4.setMaxLength(5)
        self.lineEdit_4.setFont(font)       
        self.lineEdit_4.setObjectName("lineEdit_4")
        
        self.lineEdit_5 = QtWidgets.QLineEdit(self.groupBox)
        reg_ex = QRegExp("\d+")
        input_validator = QRegExpValidator(reg_ex, self.lineEdit_5)
        self.lineEdit_5.setValidator(input_validator)
        
        self.lineEdit_5.setEnabled(True)
        self.lineEdit_5.setGeometry(QtCore.QRect(150, 140, 81, 31))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        self.lineEdit_5.setFont(font)
        self.lineEdit_5.setObjectName("lineEdit_5")
        self.lineEdit_6 = QtWidgets.QLineEdit(self.groupBox)
        self.lineEdit_6.setGeometry(QtCore.QRect(580, 110, 91, 41))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        font.setBold(True)        
        font.setWeight(50)
        self.lineEdit_6.setStyleSheet("background-color: rgb(189, 255, 255);\n"
"font: 24pt \"MS Shell Dlg 2\";")
        self.lineEdit_6.setMaxLength(5)
        self.lineEdit_6.setFont(font)
        ##self.lineEdit_6.setText("66")
        self.lineEdit_6.setObjectName("lineEdit_6")
        self.lineEdit_7 = QtWidgets.QLineEdit(self.groupBox)
        self.lineEdit_7.setEnabled(False)
        self.lineEdit_7.setGeometry(QtCore.QRect(580, 190, 91, 41))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        font.setBold(True)        
        font.setWeight(50)
        self.lineEdit_7.setStyleSheet("background-color: rgb(189, 255, 255);\n"
"font: 24pt \"MS Shell Dlg 2\";")
        self.lineEdit_7.setMaxLength(5)
        self.lineEdit_7.setObjectName("lineEdit_7")
        self.label_54 = QtWidgets.QLabel(self.groupBox)
        self.label_54.setGeometry(QtCore.QRect(500, 110, 100, 31))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        font.setBold(False)
        font.setUnderline(False)
        font.setWeight(50)
        self.label_54.setFont(font)        
        self.label_54.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_54.setObjectName("label_54")
        self.label_55 = QtWidgets.QLabel(self.groupBox)
        self.label_55.setGeometry(QtCore.QRect(500, 190, 100, 31))
        self.label_55.setEnabled(False)
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        font.setBold(False)
        font.setUnderline(False)
        font.setWeight(50)
        self.label_55.setFont(font)
        #self.label_55.setStyleSheet("color: rgb(170, 85, 127);")
        self.label_55.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_55.setObjectName("label_55")
        self.label_53 = QtWidgets.QLabel(self.frame)
        self.label_53.setGeometry(QtCore.QRect(400, 10, 331, 41))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(14)
        font.setBold(False)
        font.setUnderline(False)
        font.setWeight(50)
        self.label_53.setFont(font)
        #self.label_53.setStyleSheet("color: rgb(170, 85, 127);")
        self.label_53.setAlignment(QtCore.Qt.AlignCenter)
        self.label_53.setObjectName("label_53")
        self.groupBox_2 = QtWidgets.QGroupBox(self.frame)
        self.groupBox_2.setGeometry(QtCore.QRect(1070, 60, 221, 121))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.groupBox_2.setFont(font)
        self.groupBox_2.setObjectName("groupBox_2")
        self.radioButton_5 = QtWidgets.QRadioButton(self.groupBox_2)
        self.radioButton_5.setGeometry(QtCore.QRect(20, 30, 81, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.radioButton_5.setFont(font)
        self.radioButton_5.setChecked(False)
        self.radioButton_5.setObjectName("radioButton_5")
        self.radioButton_6 = QtWidgets.QRadioButton(self.groupBox_2)
        self.radioButton_6.setGeometry(QtCore.QRect(130, 30, 71, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.radioButton_6.setFont(font)
        self.radioButton_6.setChecked(False)
        self.radioButton_6.setObjectName("radioButton_6")
        self.pushButton_10 = QtWidgets.QPushButton(self.groupBox_2)
        self.pushButton_10.setGeometry(QtCore.QRect(130, 70, 61, 31))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        self.pushButton_10.setFont(font)
        self.pushButton_10.setObjectName("pushButton_10")
        self.lineEdit_8 = QtWidgets.QLineEdit(self.groupBox_2)
        reg_ex = QRegExp("\d+")
        input_validator = QRegExpValidator(reg_ex, self.lineEdit_8)
        self.lineEdit_8.setValidator(input_validator)
        self.lineEdit_8.setGeometry(QtCore.QRect(20, 70, 91, 31))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        self.lineEdit_8.setFont(font)
        #self.lineEdit_8.setText(""lineEdit_8)
        self.lineEdit_8.setObjectName("lineEdit_8")
        self.groupBox_3 = QtWidgets.QGroupBox(self.frame)
        self.groupBox_3.setGeometry(QtCore.QRect(1070, 200, 221, 111))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.groupBox_3.setFont(font)
        self.groupBox_3.setObjectName("groupBox_3")
        self.radioButton_7 = QtWidgets.QRadioButton(self.groupBox_3)
        self.radioButton_7.setGeometry(QtCore.QRect(20, 20, 81, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.radioButton_7.setFont(font)
        self.radioButton_7.setChecked(False)
        self.radioButton_7.setObjectName("radioButton_7")
        self.radioButton_8 = QtWidgets.QRadioButton(self.groupBox_3)
        self.radioButton_8.setGeometry(QtCore.QRect(120, 20, 71, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.radioButton_8.setFont(font)
        self.radioButton_8.setChecked(False)
        self.radioButton_8.setObjectName("radioButton_8")
        self.lineEdit_9 = QtWidgets.QLineEdit(self.groupBox_3)
        reg_ex = QRegExp("\d+")
        input_validator = QRegExpValidator(reg_ex, self.lineEdit_9)
        self.lineEdit_9.setValidator(input_validator)
        self.lineEdit_9.setGeometry(QtCore.QRect(20, 60, 91, 31))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        self.lineEdit_9.setFont(font)
        self.lineEdit_9.setObjectName("lineEdit_9")
        self.pushButton_12 = QtWidgets.QPushButton(self.groupBox_3)
        self.pushButton_12.setGeometry(QtCore.QRect(130, 60, 61, 31))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        self.pushButton_12.setFont(font)
        self.pushButton_12.setObjectName("pushButton_12")
        self.label_56 = QtWidgets.QLabel(self.frame)
        self.label_56.setGeometry(QtCore.QRect(250, 240, 431, 31))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        font.setBold(False)
        font.setUnderline(False)
        font.setWeight(50)
        self.label_56.setFont(font)
        self.label_56.setStyleSheet("color: rgb(255, 0, 0);")
        self.label_56.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_56.setObjectName("label_56")
        
        
        self.pushButton_13 = QtWidgets.QPushButton(self.frame)
        self.pushButton_13.setGeometry(QtCore.QRect(200, 10, 131, 31))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        self.pushButton_13.setFont(font)
        self.pushButton_13.setObjectName("pushButton_13")
        self.label_57 = QtWidgets.QLabel(self.frame)
        self.label_57.setGeometry(QtCore.QRect(400, 150, 31, 21))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        font.setBold(False)
        font.setUnderline(False)
        font.setWeight(50)
        self.label_57.setFont(font)
        self.label_57.setStyleSheet("")
        self.label_57.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_57.setObjectName("label_57")
        
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1366, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        
        ##### Variables initialiseations #####
        self.vehicle_no=""
        self.materail_name=""
        self.batch_id=""
        self.status="FIRST"
        self.first_wt_mode=""
        self.first_wt_val=""            
        self.second_wt_mode=""
        self.second_wt_val=""
        self.weight_type=""
        self.accepted_bags=""
        self.avg_bag_wt=""            
        self.remark=""
        self.driver_in_out="OUT"                  
        self.proposed_bags=0            
        self.target_storage=""
        self.curr_truck_cnt=""
        self.total_truck_cnt=""
        self.contractor_id=""
        self.contractor_name=""
        self.device_location_type=""
        self.status="FIRST"
        self.current_slip_no=0
        self.current_value=0
        self.line =""
        self.IO_error_flg=0
        self.xstr3=""
        self.xstr2=""
        self.xstr4=""
        self.device_id=""
        self.login_user_id=""
        self.manual_ins_flg=""
        self.slot_no="0"
        self.quantity="0"
        self.slot_no2="0"
        self.quantity2="0"
        self.goAhead="No"
        self.slot_1_wt=0
        self.slot_2_wt=0        
        self.save_diable=0
        ##########
            

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label.setText(_translate("MainWindow", "Serial. No."))
        self.pushButton_5.setText(_translate("MainWindow", "Save"))
        self.pushButton_6.setText(_translate("MainWindow", "Reset"))
        self.pushButton_7.setText(_translate("MainWindow", "Return"))
        self.label_20.setText(_translate("MainWindow", "Serial.No:"))
        self.label_19.setText(_translate("MainWindow", "10001"))
        self.pushButton_9.setText(_translate("MainWindow", "Search"))
        self.label_14.setText(_translate("MainWindow", "Vehical.No :"))
        self.pushButton_8.setText(_translate("MainWindow", "Print"))
        
        self.radioButton.setText(_translate("MainWindow", "Auto"))
        self.radioButton_2.setText(_translate("MainWindow", "Manual"))
        
                                                               
        self.label_22.setText(_translate("MainWindow", "First Weight Trucks"))
        self.label_23.setText(_translate("MainWindow", "Second  Weight Trucks"))
        self.label_24.setText(_translate("MainWindow", "006"))
        self.label_25.setText(_translate("MainWindow", "First Wt. Type :"))
        self.label_26.setText(_translate("MainWindow", "First Wt. Date :"))
        self.label_27.setText(_translate("MainWindow", "First Wt. Time :"))
        self.label_28.setText(_translate("MainWindow", "First Weight(Kg)  :"))
        self.label_29.setText(_translate("MainWindow", "Gross"))
        self.label_30.setText(_translate("MainWindow", "05 Aug 2020"))
        self.label_31.setText(_translate("MainWindow", "09:45"))
        self.label_32.setText(_translate("MainWindow", "200.00"))
        self.label_33.setText(_translate("MainWindow", "Second Wt. Type :"))
        self.label_34.setText(_translate("MainWindow", "Second Wt. Date :"))
        self.label_35.setText(_translate("MainWindow", "Second Wt. Time :"))
        self.label_36.setText(_translate("MainWindow", "Second Weight(Ton)  :"))
        self.label_37.setText(_translate("MainWindow", "Tare"))
        self.label_38.setText(_translate("MainWindow", "05 Aug 2020"))
        self.label_39.setText(_translate("MainWindow", "14:30"))
        self.label_40.setText(_translate("MainWindow", "41.00"))
        self.pushButton_11.setText(_translate("MainWindow", "Gross"))
        self.pushButton_16.setText(_translate("MainWindow", "Tare"))
        self.lineEdit_2.setText(_translate("MainWindow", "MH 43 AW 0302"))
        self.label_44.setText(_translate("MainWindow", "Net. Weight(Ton) :"))
        self.label_45.setText(_translate("MainWindow", "159.00")) #net .wt
        self.label_21.setText(_translate("MainWindow", "Current Truck Count:"))
        self.label_47.setText(_translate("MainWindow", "05 Aug 2020 14:23:00"))
        self.label_41.setText(_translate("MainWindow", "Total Truck Count:"))
        self.label_48.setText(_translate("MainWindow", "144"))
        self.label_51.setText(_translate("MainWindow", "Driver:"))
        self.radioButton_3.setText(_translate("MainWindow", "In"))
        self.radioButton_4.setText(_translate("MainWindow", "Out"))
        self.groupBox.setTitle(_translate("MainWindow", "Recipt Information"))
        self.groupBox.show()
        self.label_15.setText(_translate("MainWindow", "Recipt Id:"))
        self.comboBox.setItemText(0, _translate("MainWindow", "B000453"))
        self.label_17.setText(_translate("MainWindow", "Storage Name :"))
        #self.label_43.setText(_translate("MainWindow", "Contractor -100"))
        self.label_18.setText(_translate("MainWindow", "Actual Bags:"))
        self.lineEdit_3.setText(_translate("MainWindow", "SL001"))  #slot Id 1
        self.label_16.setText(_translate("MainWindow", "Material Type :"))
        self.label_42.setText(_translate("MainWindow", "Rice - 5444"))
        self.label_49.setText(_translate("MainWindow", "Avg.Bag.Wt.Kg :"))
        self.label_50.setText(_translate("MainWindow", "201"))  #avg.bag.wt.kg
        self.label_46.setText(_translate("MainWindow", "Slot ID1.:"))
        self.checkBox.setText(_translate("MainWindow", "if Slot ID1 Full"))
        self.checkBox.setDisabled(True)
        self.label_52.setText(_translate("MainWindow", "Slot ID2.:"))
        self.lineEdit_5.setText(_translate("MainWindow", "207")) # Actual bags
        self.lineEdit_6.setText(_translate("MainWindow", "200")) #quantity
        self.label_54.setText(_translate("MainWindow", "Bags:"))
        self.label_55.setText(_translate("MainWindow", "Bags:"))
        self.label_53.setText(_translate("MainWindow", "RECIPT UNLOADING AT STORAGE"))
        self.groupBox_2.setTitle(_translate("MainWindow", "First Wt - Manual"))
        self.radioButton_5.setText(_translate("MainWindow", "Gross"))
        self.radioButton_5.setChecked(True)
        self.radioButton_6.setText(_translate("MainWindow", "Tare"))
        self.pushButton_10.setText(_translate("MainWindow", "Update"))
        self.groupBox_3.setTitle(_translate("MainWindow", "Second Wt - Manual"))
        self.radioButton_7.setText(_translate("MainWindow", "Gross"))
        self.radioButton_8.setText(_translate("MainWindow", "Tare"))
        self.radioButton_8.setChecked(True)
        self.pushButton_12.setText(_translate("MainWindow", "Update"))        
        self.label_56.setText(_translate("MainWindow", "Record Successfully saved !!!"))
        self.pushButton_13.setText(_translate("MainWindow", "New Weighing"))
        self.label_57.setText(_translate("MainWindow", ".Kg"))
        self.pushButton_7.clicked.connect(MainWindow.close)
        self.lineEdit_5.setText("11") #actual Bags
        self.lineEdit_3.setText("SL001")
        self.lineEdit_4.setText("SL002")
        self.lineEdit_6.setText("66")
        self.lineEdit_7.setText("77")
        
        self.startx()


        
    def startx(self):
       
        self.groupBox.show()
        #self.groupBox_2.hide()
        self.timer2=QtCore.QTimer()
        
        self.timer1=QtCore.QTimer()
        self.timer1.setInterval(1000)        
        self.timer1.timeout.connect(self.device_date)
        self.timer1.start(1)
        
       
        
        self.radioButton_2.clicked.connect(self.mannual_onclick)
        self.radioButton.clicked.connect(self.auto_onclick)
        
        self.pushButton_11.clicked.connect(self.gross_wt_onclick)
        self.pushButton_16.clicked.connect(self.tare_wt_onclick)
        self.pushButton_6.clicked.connect(self.reset_fun)
        self.pushButton_13.clicked.connect(self.reset_fun)
        self.pushButton_5.clicked.connect(self.save_data)
        self.pushButton_9.clicked.connect(self.fetch_via_search)
        
        self.lineEdit_2.textChanged.connect(self.text_change_f)
        self.lineEdit_3.textChanged.connect(self.text_change_f2)
        self.lineEdit_4.textChanged.connect(self.text_change_f3)
        
        self.lineEdit.textChanged.connect(self.text_change_mannual_first_wt)
        self.lineEdit_4.textChanged.connect(self.text_change_mannual_second_wt)
        self.lineEdit_5.textChanged.connect(self.avg_bags_wt_calc)
        
        
        self.comboBox.currentTextChanged.connect(self.batch_id_onchange)
        self.lineEdit_2.setMaxLength(12)
        self.listWidget_3.doubleClicked.connect(self.fetch_via_first_wt_vehical_list)
        self.listWidget_2.doubleClicked.connect(self.fetch_via_second_wt_vehical_list)
        self.pushButton_10.clicked.connect(self.mannual_update1)
        self.pushButton_12.clicked.connect(self.mannual_update2)
        self.pushButton_8.clicked.connect(self.print_recipt)
        self.checkBox.clicked.connect(self.slot2_enable)
        self.lineEdit.setText("")
        self.lineEdit_4.setText("")
        #self.lineEdit_5.setText("7777") #serach line edit
        self.start_wt()
        
        self.i=0
        connection = sqlite3.connect("fci.db")
        results=connection.execute("SELECT BATCH_ID ,BATCH_ID_DISPLAY FROM BATCH_MST WHERE STATUS='Open' ORDER BY BATCH_ID DESC ") 
        for x in results:            
            self.comboBox.addItem(str(x[1]),self.i)
            self.comboBox.setItemText(self.i,str(x[1]))            
            self.i=self.i+1
        connection.close()
        
        self.i=0
        connection = sqlite3.connect("fci.db")
        results=connection.execute("select seq+1 from sqlite_sequence WHERE name = 'WEIGHT_MST'") 
        for x in results:            
            self.label_19.setText(str(x[0]).zfill(6))
        connection.close()
        
        connection = sqlite3.connect("fci.db")
        results=connection.execute("SELECT LOGIN_USER_ID,DEVICE_LOCATION_TYPE FROM GLOBAL_VAR") 
        for x in results:
            self.login_user_id=str(x[0])
            self.device_location_type=str(x[1])
        connection.close()
        self.reset_fun()
    
    
    def device_date(self):     
        self.label_47.setText(datetime.datetime.now().strftime("%d %b %Y %H:%M:%S"))
        
        
   
        
        
    def avg_bags_wt_calc(self):
        bags=0
        net_wt=0
        self.label_56.hide()
        if(self.lineEdit_5.text() != ""):
            if(int(self.lineEdit_5.text()) > 0):
                if(float(self.label_45.text()) > 0.0 ):
                         bags=int(self.lineEdit_5.text())
                         net_wt=float(self.label_45.text())*1000
                         avg_bag_wt=float(net_wt/bags)
                         self.label_50.setText(str(round(avg_bag_wt)))
                        # self.label_50.setText(str(bags))
            else:
                        self.label_50.setText("0")
        else:
            self.label_50.setText("0")
    
    def slot2_enable(self):
        if(self.checkBox.isChecked()):
            self.lineEdit_4.setEnabled(True)
            self.lineEdit_7.setEnabled(True)
            self.label_52.setEnabled(True)
            self.label_55.setEnabled(True)
        if(not (self.checkBox.isChecked())):
            self.lineEdit_4.setDisabled(True)
            self.lineEdit_7.setDisabled(True)
            self.label_52.setDisabled(True)
            self.label_55.setDisabled(True)
            
            
            
            
    def mannual_update1(self,):
        mode=""
        m_str=0
        if(self.radioButton_5.isChecked()):
                mode="Gross"
        else:
                mode="Tare"
        
        if(mode != self.label_37.text()):
            if(self.lineEdit_8.text() != ""):
                    self.label_29.setText(str(mode))
                    m_str=float(float(self.lineEdit_8.text())/1000)                
                    self.label_32.setText('{:06.3f}'.format(m_str))
                    self.label_30.setText(datetime.datetime.now().strftime("%Y-%m-%d"))
                    self.label_31.setText(datetime.datetime.now().strftime("%H:%M"))
                    self.status="FIRST"
                
                
    def mannual_update2(self,):
        mode=""
        m_str=0
        if(self.radioButton_7.isChecked()):
                mode="Gross"
        else:
                mode="Tare"        
        if(mode != self.label_29.text()):
             if(self.lineEdit_9.text() != ""):   
                    self.label_37.setText(str(mode))
                    m_str=float(float(self.lineEdit_9.text())/1000) 
                    self.label_40.setText('{:06.3f}'.format(m_str))
                    self.label_38.setText(datetime.datetime.now().strftime("%Y-%m-%d"))
                    self.label_39.setText(datetime.datetime.now().strftime("%H:%M"))
                    self.net_wt_calc()
                    self.status="SECOND"
                

    def text_change_f(self):
        #print("insedie finct ")
        string =self.lineEdit_2.text()
        if not (string.isupper()):
               self.lineEdit_2.setText(string.upper())
               #print(string.upper())
    def text_change_f2(self):
        #print("insedie finct ")
        string =self.lineEdit_3.text()
        if not (string.isupper()):
               self.lineEdit_3.setText(string.upper())
               
    def text_change_f3(self):
        #print("insedie finct ")
        string =self.lineEdit_4.text()
        if not (string.isupper()):
               self.lineEdit_4.setText(string.upper())            
               
    def text_change_mannual_first_wt(self):        
        if(self.lineEdit_8.text() == ""):
               self.lineEdit_8.setText("0")
        else:      
               print(self.lineEdit.text())
               
    def text_change_mannual_second_wt(self):        
        if(self.lineEdit_9.text() == ""):
               self.lineEdit_9.setText("0")
        else:      
               print(self.lineEdit_9.text())
               
    def mannual_onclick(self):
        self.manual_ins_flg="(*)"
        #print("insidde mannual :"+str(self.radioButton_2.isChecked()))
        if(self.radioButton_2.isChecked()):
            self.groupBox_3.show()
            self.groupBox_2.show()            
        else:            
            self.groupBox_3.hide()
            self.groupBox_2.hide()
    
    def auto_onclick(self):
        self.manual_ins_flg=""
        if(self.radioButton.isChecked()):
            self.groupBox_3.hide()
            self.groupBox_2.hide()
        else:
            self.groupBox_3.show()
            self.groupBox_2.show()
            
            
            
    def reset_fun(self):
        # First Wt
        self.label_29.setText("--")         
        self.label_30.setText("--")
        self.label_31.setText("--:--")
        self.label_32.setText("0")
        
        #second Wt                      
        self.label_37.setText("--")
        self.label_38.setText("--")        
        self.label_39.setText("--:--")
        self.label_40.setText("0")
        
        #Net Wt
        self.label_45.setText("0")
            
        self.listWidget_2.clear()
        self.listWidget_3.clear()
        
        #message 
        self.label_56.setText("")
        
        # Vehical No
        self.lineEdit_2.setText("")
        
        
        
        #Accpted Wt
        self.label_50.setText("0")
        
        #Actual Bag count
        self.lineEdit_5.setText("")
        
        #
        self.lineEdit_5.setText("")
        
        #Avg. bag. Wt
        #self.label_53.setText("50")
        
        #remark
        #self.textEdit.setText("")
        #Search lineedit
        self.lineEdit.setText("") 
        
        #Quantity
        self.lineEdit_6.setText("")
        
        #Mannual First Wt
        self.lineEdit_8.setText("")
        
        #Mannual Second Wt
        self.lineEdit_9.setText("")
         
        self.lineEdit_3.setText("")
        # quantyy 1
        self.lineEdit_6.setText("")
        #slot 2 id
        self.lineEdit_4.setText("")
        #quantity 2
        self.lineEdit_7.setText("")
         
        
        #message
        self.label_56.hide()
        self.material=""
        connection = sqlite3.connect("fci.db")
        results=connection.execute("SELECT BATCH_ID,MATERIAL_TYPE,REQUIRED_TRUCKS,CONTRACTOR_NAME,BATCH_ID_DISPLAY FROM BATCH_MST WHERE BATCH_ID=(SELECT BATCH_ID FROM BATCH_MST ORDER BY BATCH_ID DESC  LIMIT 1)") 
        for x in results:
                self.batch_id=str(x[0])
                self.material=str(x[1])
               #Material Type
                self.label_42.setText(str(x[1]))
                #Contractor Name
                #self.label_43.setText(str(x[3]))
                 #Total truck count
                self.label_48.setText(str(x[2]))
                
                self.comboBox.setCurrentText(str(x[4]))
                
        connection.close()
       
       
        connection = sqlite3.connect("fci.db")
        results=connection.execute("SELECT COUNT(*)+1 FROM WEIGHT_MST WHERE BATCH_ID=(SELECT BATCH_ID FROM BATCH_MST ORDER BY BATCH_ID DESC  LIMIT 1)") 
        for x in results:            
                 #current truck count
                 self.label_24.setText(str(x[0]).zfill(3))
        connection.close()
        
        
        self.i=0
        connection = sqlite3.connect("fci.db")
        results=connection.execute("select seq+1 from sqlite_sequence WHERE name = 'WEIGHT_MST'") 
        for x in results:            
            self.label_19.setText(str(x[0]).zfill(6))
        connection.close()
        
        self.stroagecombo.clear()
        self.i=0
        connection = sqlite3.connect("fci.db")
        results=connection.execute("select STORAGE_NAME,STORAGE_LOCATION from STORAGE_DETAILS ") 
        for x in results:
            self.stroagecombo.addItem(str(x[0]),self.i)
            self.stroagecombo.setItemText(self.i,str(x[0]))            
            self.i=self.i+1
            
            
        connection.close()
        
        
        
        self.load_1st_wt_vehicles()
        self.load_2nd_wt_vehicles()
        self.radioButton_4.setChecked(True)
        self.groupBox_3.hide()
        self.groupBox_2.hide()
        self.radioButton.setChecked(True)
        self.current_slip_no ="0"
        self.pushButton_5.setEnabled(True)
        self.status="FIRST"
        self.pushButton_8.setDisabled(True)
        self.lineEdit_6.setDisabled(True)
        self.lineEdit_3.setDisabled(True)
        self.lineEdit_5.setDisabled(True)
       
       
    def batch_id_onchange(self):
        print("Index :"+str(self.comboBox.itemData(self.comboBox.currentIndex())))
        self.batch_id=str(self.comboBox.itemText(self.comboBox.currentIndex()))
        connection = sqlite3.connect("fci.db")
        results=connection.execute("SELECT BATCH_ID,MATERIAL_TYPE,REQUIRED_TRUCKS,CONTRACTOR_NAME FROM BATCH_MST WHERE BATCH_ID_DISPLAY='"+str(self.batch_id)+"'") 
        for x in results:
                self.batch_id=str(x[0])
                self.material=str(x[1])
               #Material Type
                self.label_42.setText(str(x[1]))
                #Contractor Name
                #self.label_43.setText(str(x[3]))
                 #Total truck count
                self.label_48.setText(str(x[2]))
        connection.close()
        
        
        connection = sqlite3.connect("fci.db")
        results=connection.execute("select substr(SLOT_NO ,0,6) from SLOTS_MST WHERE MATERIAL ='"+str(self.material)+"' order by R_DATE desc limit 1") 
        for x in results:
            #self.label_34.setText(str(x[0]))
            self.lineEdit_3.setText(str(x[0]))
            self.lineEdit_4.setText(str(x[0]))
            
        connection.close()
        
        
        
        self.load_1st_wt_vehicles()
        self.load_2nd_wt_vehicles()
        
        
    def start_wt(self):
        #print("Weight Started ....")
        try:
            self.ser = serial.Serial(
                                port='/dev/ttyUSB0',
                                baudrate=9600,
                                bytesize=serial.EIGHTBITS,
                                parity=serial.PARITY_NONE,
                                stopbits=serial.STOPBITS_ONE,
                                xonxoff=False,
                                timeout = 0.05
                            )
        
            self.ser.flush()       
            
            self.line = self.ser.readline(15)
            print("o/p:"+str(self.line))
             
            self.timer2.setInterval(5000)        
            self.timer2.timeout.connect(self.display_lcd_val)
            self.timer2.start(1)
            
            
        except IOError:
            print("IO Errors-load cell connections error")
            self.IO_error_flg=1
            
            
    def display_lcd_val(self):               
        #print(" inside display_lcd_val:"+str(self.IO_error_flg))
        if(self.IO_error_flg==0):
            try:
                self.line = self.ser.readline(20)
                #print(" raw o/p:"+str(self.line)) 
                if (len(self.line) > 2):
                    
                    self.ser.flush()
                    self.ser.write(b'*D\r')
                    self.xstr3=str(self.line,'utf-8')
                    self.xstr2=self.xstr3[0:6]
                    #print("self.xstr3:"+str(self.xstr3)+" self.xstr2: "+str(self.xstr2))
                    try:
                         self.xstr4=int(self.xstr2)
                    except ValueError:                        
                        print("Value Error"+str(self.xstr2))
                        self.xstr4=0                    
                    try:
                        self.current_value=float(int(self.xstr4)/1000)
                    except ValueError:
                        print("Value Error :"+str(self.xstr4))
                        self.xstr4=0
                        self.current_value=0                    
                    self.lcdNumber.setProperty("value", str(self.xstr4))                    
                    
            except IOError:
                print("IO Errors : Data Read Error") 
                self.IO_error_flg=1  
              
            
            
        
    def gross_wt_onclick(self):
        #print("self.current_slip_no: "+strself.current_slip_no))
        
        if(str(self.current_slip_no) == "0"):
               self.label_29.setText("Gross")         
               self.label_30.setText(datetime.datetime.now().strftime("%Y-%m-%d"))
               self.label_31.setText(datetime.datetime.now().strftime("%H:%M"))
               self.label_32.setText('{:06.3f}'.format(self.current_value))
               #self.label_32.setText(str("200"))
               
        else:     
               self.label_37.setText("Gross")
               self.label_38.setText(datetime.datetime.now().strftime("%Y-%m-%d"))               
               self.label_39.setText(datetime.datetime.now().strftime("%H:%M"))
               self.label_40.setText('{:06.3f}'.format(self.current_value))
               #self.label_40.setText(str("200"))
                       
        self.net_wt_calc()
        
        
                   
    def tare_wt_onclick(self):
        
        
        if(str(self.current_slip_no) == "0"):
               self.label_29.setText("Tare")         
               self.label_30.setText(datetime.datetime.now().strftime("%Y-%m-%d"))
               self.label_31.setText(datetime.datetime.now().strftime("%H:%M"))
               self.label_32.setText('{:06.3f}'.format(self.current_value))
               #self.label_32.setText(str("80"))
               
        else:     
               self.label_37.setText("Tare")
               self.label_38.setText(datetime.datetime.now().strftime("%Y-%m-%d"))               
               self.label_39.setText(datetime.datetime.now().strftime("%H:%M"))
               self.label_40.setText('{:06.3f}'.format(self.current_value))
               #self.label_40.setText(str("80"))
                       
        self.net_wt_calc()
     
    def net_wt_calc(self):        
        #print(" self.label_32.text : "+str(self.label_32.text()))
        #print(" self.label_40.text : "+str(self.label_40.text()))
        self.first_wt=str(self.label_32.text())
        self.second_wt=str(self.label_40.text())
        if(float(self.first_wt) > 0 and float(self.second_wt) > 0):            
                if(float(self.first_wt) >= float(self.second_wt)):            
                      self.net_wt=(float(self.first_wt)-float(self.second_wt))             
                      self.label_45.setText('{:06.3f}'.format(self.net_wt))
                else:
                      self.net_wt=(float(self.second_wt)-float(self.first_wt))             
                      self.label_45.setText('{:06.3f}'.format(self.net_wt))
                accepted_bags=round(float(self.net_wt)*1000/50)
                #self.label_50.setText(str(accepted_bags))
                #self.lineEdit_6.setText(str(accepted_bags))
                self.lineEdit_6.setEnabled(True)
                self.lineEdit_3.setEnabled(True)
                self.lineEdit_5.setEnabled(True)
                self.avg_bags_wt_calc()
                #self.lineEdit_6.setText("")
                #self.lineEdit_3.setText("")
                #self.lineEdit_4.setText("")
                #self.lineEdit_7.setText("") 
                      
    def load_1st_wt_vehicles(self):
        self.listWidget_3.clear()
        connection = sqlite3.connect("fci.db")
        #print("SELECT VEHICLE_NO||' - ('||printf(\"%04d\", SERIAL_ID)||')' AS SERIAL_ID FROM WEIGHT_MST WHERE STATUS='FIRST' and ISSUE_ID IS NULL and batch_id='"+str(self.batch_id)+"'")       
       
        results=connection.execute("SELECT VEHICLE_NO||' - ('||printf(\"%04d\", SERIAL_ID)||')' AS SERIAL_ID FROM WEIGHT_MST WHERE STATUS='FIRST' and ISSUE_ID IS NULL and batch_id='"+str(self.batch_id)+"'")       
        for x in results:        
               self.listWidget_3.addItem(str(x[0]))
        connection.close() 
    
    def load_2nd_wt_vehicles(self):
        self.listWidget_2.clear()
        connection = sqlite3.connect("fci.db")
        results=connection.execute("SELECT VEHICLE_NO||' - ('||printf(\"%04d\", SERIAL_ID)||')' AS SERIAL_ID FROM WEIGHT_MST WHERE STATUS='SECOND' and ISSUE_ID IS NULL and batch_id='"+str(self.batch_id)+"'")       
        for x in results:        
               self.listWidget_2.addItem(str(x[0]))
        connection.close()
        
    def print_recipt(self):
        self.serial_id=int(self.label_19.text())
        #print("Slip Id : "+str(str(self.serial_id)))
        self.pushButton_8.setDisabled(True)
        connection = sqlite3.connect("fci.db")          
        with connection:        
             cursor = connection.cursor()                    
             cursor.execute("UPDATE PRINTER_DATA SET SERIAL_ID='"+str(self.serial_id)+"'") 
        connection.commit();
        connection.close()  
        
        
        
        connection = sqlite3.connect("fci.db")       
        results=connection.execute("SELECT STATUS FROM WEIGHT_MST WHERE SERIAL_ID ='"+str(self.serial_id)+"'")
        for x in results:
                if (str(x[0])=='SECOND'):
                        os.system("./job_print_recipt_storage.sh")
                        #os.system("./job_print_recipt.sh")
                        #os.system("./job_print_recipt.sh")
                else:
                        os.system("./job_print_recipt_storage.sh")
        connection.close()  
    
    def fetch_via_search(self):
        if(str(self.lineEdit.text()) != ""):
                self.label_56.hide()
                self.current_slip_no=str(self.lineEdit.text())
                #print("Slip No :"+str(self.current_slip_no))        
                self.fetch_slip_data()
                #print(" self.save_diable :"+str(self.save_diable))
                if(str(self.save_diable) == "1"):
                    self.pushButton_5.setDisabled(True)
                    self.net_wt_calc()
                else:
                    self.pushButton_5.setEnabled(True)
                    
        else:
                self.label_56.setText("Slip No. is empty.")
                self.label_56.show()
                
    def fetch_via_first_wt_vehical_list(self):
        v_str=str(self.listWidget_3.currentItem().text())
        self.re_str = str(v_str)                
        self.current_slip_no= re.search('\(([^)]+)', self.re_str).group(1)
        
        #print("self.current_slip_no:"+str(self.current_slip_no))
        self.fetch_slip_data()
        self.pushButton_5.setEnabled(True)
    
    def fetch_via_second_wt_vehical_list(self):
        v_str=str(self.listWidget_2.currentItem().text())
        self.re_str = str(v_str)                
        self.current_slip_no= re.search('\(([^)]+)', self.re_str).group(1)
        
        #print("self.current_slip_no:"+str(self.current_slip_no))
        self.fetch_slip_data()
        self.pushButton_5.setDisabled(True)
        self.net_wt_calc()
    
    def fetch_slip_data(self):        
        self.vehicle_no=""
        connection = sqlite3.connect("fci.db")
        
        results=connection.execute("SELECT SERIAL_ID, MATERIAL_NAME,FIRST_WEIGHT_MODE,FIRST_WEIGHT_VAL,FIRST_WT_CRTEATED_ON ,VEHICLE_NO,IFNULL(SECOND_WT_MODE,'--'),IFNULL(SECOND_WT_VAL,0),IFNULL(SECOND_WT_CREATED_ON,'--'),STATUS,REMARK ,DRIVER_IN_OUT,IFNULL(PROPOSED_BAGS,'0'),TARGET_STORAGE,CURR_TRUCK_CNT,TOTAL_TRUCKS_CNT,CONTRACTOR_ID,CONTRACTOR_NAME,IFNULL(ACCPTED_BAGS,'0'),NULL,TARGET_STORAGE,IFNULL(SUBSTR(SLOT_1,0,6),'0'),IFNULL(SLOT_1_QUANTITY,'0'),substr(SLOT_2,0,6),IFNULL(SLOT_2_QUANTITY,'0') FROM WEIGHT_MST WHERE SERIAL_ID='"+self.current_slip_no+"'")       
        for x in results:        
            #self.label_.setText(str(x[0]).zfill(4))
            self.label_19.setText(str(x[0]).zfill(6))
            self.current_slip_no=str(x[0])
             # First Wt
            self.label_29.setText(str(x[2]))         
            self.label_30.setText(str(x[4])[0:11])
            self.label_31.setText(str(x[4])[11:16])
            self.label_32.setText('{:06.3f}'.format(x[3]))
         
            # Vehical No
            self.lineEdit_2.setText(str(x[5]))
           
            #second Wt                      
            self.label_37.setText(str(x[6]))
            self.label_38.setText(str(x[8])[0:11])
            if(str(x[8]) == "--"):
                   self.label_39.setText("--:--")
            else:
                   self.label_39.setText(str(x[8])[11:16])
            self.label_40.setText('{:06.3f}'.format(x[7]))
            
            #Net Wt
            self.label_45.setText("0")
                
            #remark
            #self.textEdit.setText(str(x[10])) 
            self.pushButton_8.setEnabled(True)
            if(str(x[11]) == "OUT"):
                self.radioButton_4.setChecked(True)
                self.radioButton_3.setChecked(False)
                
            else:
               self.radioButton_3.setChecked(True)
               self.radioButton_4.setChecked(False)
            
            
            
            
            #Accpted Bags
            self.label_50.setText(str(x[18]))
            
            
            #Proposed Bag count
            self.lineEdit_5.setText(str(x[12]))
            
            #Avg. bag. Wt
            #self.label_53.setText("50")
            #current truc count
            self.label_24.setText(str(x[14]).zfill(3))
            #Total Truck count
            self.label_48.setText(str(x[15]))
            
            #batch id
            #self.comboBox.setCurrentText(str(x[19]).zfill(6))
            
            #message
            self.label_56.hide()
            
            #Target Storage
            #self.comboBox_2.setCurrentText(str(x[20]))
            
            if(str(x[9]) == "SECOND"):
                    
                    #slot 1 ID
                    arr=[]
                    only_slot_id=""
                    arr=str(x[21]).split("/")
                    only_slot_id=arr[0]
                    print("slot id 1 :"+(str(x[21])))
                    '''
                    arr=[]
                    only_slot_id2=""
                    arr=str(x[23]).split("/")
                    only_slot_id2=arr[0]
                    '''
                    #print("slot id 2 :"+(str(x[23])))
                    print("quantity:"+(str(x[24])))
                    
                    self.lineEdit_3.setText(str(only_slot_id))
                    # quantyy 1
                    
                    self.lineEdit_6.setText(str(x[22]))
                    
                    
                    if(str(x[24]) == "0"):
                             self.lineEdit_4.setText("")
                             self.lineEdit_7.setText("")
                    else:#slot 2 id
                             self.lineEdit_4.setText(str(x[23]))
                             self.lineEdit_7.setText(str(x[24]))
            else:
                    self.lineEdit_3.setText("")
                    # quantyy 1
                    self.lineEdit_6.setText("")
                    #slot 2 id
                    self.lineEdit_4.setText("")
                    #quantity 2
                    self.lineEdit_7.setText("")
            
            
            self.status="SECOND"
            self.save_diable=0
            if(str(x[9]) == "SECOND"):
                  self.save_diable=1
            else:
                  self.save_diable=0
                  self.lineEdit_6.setDisabled(True)
                  self.lineEdit_3.setDisabled(True)
        connection.close()       
     
    def save_data(self):        
        self.vehicle_no=str(self.lineEdit_2.text())        
        if(len(self.vehicle_no) >= 4):            
            self.materail_name=str(self.label_42.text())
            self.order_id=self.comboBox.currentText()
            self.status=self.status
            self.first_wt_mode=self.label_29.text()
            self.first_wt_val=self.label_32.text()            
            #self.second_wt_mode=self.label_37.text()
            #self.second_wt_val=self.label_39.text()
            if(self.radioButton_2.isChecked()):                
                    self.weight_type="MANUAL"
            else :
                    self.weight_type="AUTO"
            
            self.avg_bags_wt_calc()
                    
            self.accepted_bags=self.lineEdit_5.text()
            self.avg_bag_wt=self.label_50.text()          
            #self.remark=self.textEdit.toPlainText()
            self.driver_in_out="OUT"
            
            if(self.radioButton_4.isChecked()):                
                    self.driver_in_out="OUT"
            else :
                    self.driver_in_out="IN"
            
            
            
            if(self.lineEdit_5.text() != ""):
                  self.proposed_bags=str(self.lineEdit_5.text())
            else:       
                  self.proposed_bags=0
                
            if(self.lineEdit_3.text() != ""):
                  self.slot_no=str(self.lineEdit_3.text())
                  if(self.lineEdit_6.text() != ""):
                      self.quantity=str(self.lineEdit_6.text())                  
                      self.slot_1_wt=(int(self.lineEdit_6.text())*int(self.avg_bag_wt))/1000
                  else:
                      self.quantity=0
                      self.slot_1_wt=0
            else:       
                  self.slot_no=0
                  self.quantity=0
                  self.slot_1_wt=0
                  
                  
            if(self.lineEdit_4.text() != ""):
                  self.slot_no2=str(self.lineEdit_4.text())
                  if(self.lineEdit_7.text() != ""):                      
                          self.quantity2=str(self.lineEdit_7.text())
                          self.slot_2_wt=(int(self.lineEdit_7.text())*int(self.avg_bag_wt))/1000
                  else:
                          self.slot_no2=0
                          self.quantity2=0
                          self.slot_2_wt=0
                        
            else:       
                  self.slot_no2=0
                  self.quantity2=0
                  self.slot_2_wt=0
                
                
            
            #self.target_storage=self.comboBox_2.currentText()
            self.curr_truck_cnt=self.label_24.text()
            self.total_truck_cnt=self.label_48.text()
            self.contractor_id="0"
            #self.contractor_name=self.label_43.text()
            #self.device_location_type="SITE"
            #self.device_location_type=str(x[1])
            self.accepted_bags=self.label_50.text()
            
            connection = sqlite3.connect("fci.db")
            results=connection.execute("SELECT DEVICE_ID FROM GLOBAL_VAR")       
            for x in results:
                   self.device_id=str(x[0])
            connection.close()
            
            #self.current_slip_no="0"     
            if(str(self.current_slip_no)=="0"):
               connection = sqlite3.connect("fci.db")
               results=connection.execute("SELECT max(SERIAL_ID)+1 FROM WEIGHT_MST")       
               for x in results:
                   self.current_slip_no=str(x[0])
               connection.close()    
            else:
                self.current_slip_no=str(self.label_19.text())
                
                
            if(len(self.vehicle_no) >= 4):                 
                      if(str(self.batch_id) != ""):
                             if(self.status=="FIRST"):                         
                                 if(float(self.first_wt_val) > 0 ): 
                                             ### insert  Statements
                                             connection = sqlite3.connect("fci.db")
                                             with connection:                            
                                                        cursor = connection.cursor()       
                                                        print(" First Wt Date :"+str(self.label_30.text())+" First  Wt Time:"+str(self.label_31.text()))
                                                        cr_date_str=str(self.label_30.text()+" "+str(self.label_31.text())+":00")
                                                        #print("cr_date_str:"+str(cr_date_str))
                                                        cr_date= datetime.datetime.strptime(cr_date_str, '%Y-%m-%d %H:%M:%S')
                                                         
                                                        cursor.execute("INSERT INTO WEIGHT_MST(VEHICLE_NO,MATERIAL_NAME,BATCH_ID,STATUS,FIRST_WEIGHT_MODE,FIRST_WEIGHT_VAL,FIRST_WT_CRTEATED_ON,WEIGHT_TYPE,ACCPTED_BAGS,AVG_BAG_WT,REMARK,"
                                                            +"DRIVER_IN_OUT,PROPOSED_BAGS,TARGET_STORAGE,CURR_TRUCK_CNT,TOTAL_TRUCKS_CNT,CONTRACTOR_ID,CONTRACTOR_NAME,DEVICE_LOCATION_TYPE,ACCPTED_BAGS,DEVICE_ID,CREATED_BY,MANNUAL_INS_FLG)"
                                                                       +"VALUES ('"+self.vehicle_no+"','"+self.materail_name+"','"+self.batch_id+"','"+self.status+"','"+self.first_wt_mode+"','"+self.first_wt_val+"','"+str(cr_date)+"','"+self.weight_type+"','"+self.accepted_bags+"','"
                                                                       +self.avg_bag_wt+"','"+self.remark+"','"+str(self.driver_in_out)+"','"+str(self.proposed_bags)+"','"+str(self.target_storage)+"','"+str(self.curr_truck_cnt)+"','"+str(self.total_truck_cnt)+"','"+str(self.contractor_id)
                                                                       +"','"+str( self.contractor_name)+"','"+str(self.device_location_type)+"','"+self.accepted_bags+"','"+str(self.device_id)+"','"+str(self.login_user_id)+"','"+str(self.manual_ins_flg)+"')")
                                                                      
                                             #self.reset_fun()
                                             self.label_56.setText("Successfully Loaded First Weight.")
                                             self.log_audit("Weighing"," Loaded First Weight. slip No:"+str(int(self.label_19.text())))
                                             self.label_56.show()  
                                             connection.commit();
                                             connection.close()
                                             print("Data Inserted !!!!")
                                             self.load_1st_wt_vehicles()
                                             self.load_2nd_wt_vehicles()
                                             self.pushButton_5.setDisabled(True)
                                             self.pushButton_8.setEnabled(True)
                                 else:
                                             self.label_56.setText("First Weight. should not be zero")
                                             self.label_56.show() 
                             elif(self.status=="SECOND"):
                                 self.second_wt_mode=self.label_37.text()
                                 self.second_wt_val=self.label_40.text()
                                 self.net_wt_val=self.label_45.text()
                                 
                                 if(self.label_29.text() != self.label_37.text()):
                                     if(float(self.label_45.text()) > 0 ):
                                         self.validation()
                                         if(str(self.goAhead) == 'Yes'):
                                                 first_wt_date_str=str(self.label_30.text()+" "+str(self.label_31.text())+":00")                                 
                                                 first_wt_date= datetime.datetime.strptime(first_wt_date_str, '%Y-%m-%d %H:%M:%S')
                                                 
                                                 second_wt_date_str=str(self.label_38.text()+" "+str(self.label_39.text())+":00")                                 
                                                 second_wt_date= datetime.datetime.strptime(second_wt_date_str, '%Y-%m-%d %H:%M:%S')
                                                 
                                                 connection = sqlite3.connect("fci.db")
                                                 results=connection.execute("SELECT count(*) FROM WEIGHT_MST WHERE SERIAL_ID = '"+str(int(self.label_19.text()))+"' ")       
                                                 for x in results:
                                                           self.exist_flag=str(x[0])
                                                 connection.close()
                                                 print("SELECT count(*) FROM WEIGHT_MST WHERE SERIAL_ID = '"+str(self.current_slip_no)+"' ")
                                                 print("exist flg :"+str(self.exist_flag))
                                                 if(self.exist_flag == '1'):
                                                     print("exist flg :inside update")
                                                     connection = sqlite3.connect("fci.db")
                                                     with connection:                            
                                                            cursor = connection.cursor()
                                                            
                                                            cursor.execute("UPDATE WEIGHT_MST SET STATUS='SECOND',SECOND_WT_MODE='"+str(self.second_wt_mode)+"',SECOND_WT_VAL='"+str(self.second_wt_val)+"',SECOND_WT_CREATED_ON='"+str(second_wt_date)+"',NET_WEIGHT_VAL='"+str(self.net_wt_val)+"',WEIGHT_TYPE='"+self.weight_type+"',ACCPTED_BAGS='"+self.accepted_bags+"',REMARK='"+self.remark+"',DRIVER_IN_OUT='"+self.driver_in_out+"',PROPOSED_BAGS='"+self.proposed_bags+"',TARGET_STORAGE='"+self.target_storage+"',DEVICE_ID='"+str(self.device_id)+"' ,UPLOAD_STATUS=null, UPDATED_BY='"+str(self.login_user_id)+"',UPDATED_ON=current_timestamp,MANNUAL_INS_FLG='"+str(self.manual_ins_flg)+"',SLOT_1='"+str(self.slot_no)+"/"+str(self.order_id)+"',SLOT_1_QUANTITY='"+str(self.quantity)+"',SLOT_2='"+str(self.slot_no2)+"/"+str(self.order_id)+"',SLOT_2_QUANTITY='"+str(self.quantity2)+"',AVG_BAG_WT='"+str(self.avg_bag_wt)+"'   WHERE SERIAL_ID='"+str(int(self.label_19.text()))+"'");
                                                     connection.commit();
                                                     connection.close()
                                                     
                                                 else:
                                                     print("exist flg :inside insert")
                                                     connection = sqlite3.connect("fci.db")
                                                     with connection:                            
                                                            cursor = connection.cursor()
                                                            
                                                           
                                                            
                                                            cursor.execute("INSERT INTO WEIGHT_MST(VEHICLE_NO,MATERIAL_NAME,BATCH_ID,STATUS,FIRST_WEIGHT_MODE,FIRST_WEIGHT_VAL,FIRST_WT_CRTEATED_ON,WEIGHT_TYPE,ACCPTED_BAGS,AVG_BAG_WT,REMARK,"
                                                                   +"DRIVER_IN_OUT,PROPOSED_BAGS,TARGET_STORAGE,CURR_TRUCK_CNT,TOTAL_TRUCKS_CNT,CONTRACTOR_ID,CONTRACTOR_NAME,DEVICE_LOCATION_TYPE,SECOND_WT_MODE,SECOND_WT_VAL,SECOND_WT_CREATED_ON,NET_WEIGHT_VAL,DEVICE_ID,CREATED_BY,MANNUAL_INS_FLG,SLOT_1,SLOT_1_QUANTITY,SLOT_2,SLOT_2_QUANTITY,AVG_BAG_WT)"
                                                                   +"VALUES ('"+self.vehicle_no+"','"+self.materail_name+"','"+self.batch_id+"','"+self.status+"','"+self.first_wt_mode+"','"+self.first_wt_val+"','"+str(first_wt_date)+"','"+self.weight_type+"','"+self.accepted_bags+"','"
                                                                   +self.avg_bag_wt+"','"+self.remark+"','"+str(self.driver_in_out)+"','"+str(self.proposed_bags)+"','"+str(self.target_storage)+"','"+str(self.curr_truck_cnt)+"','"+str(self.total_truck_cnt)+"','"+str(self.contractor_id)
                                                                   +"','"+str( self.contractor_name)+"','"+str(self.device_location_type)+"','"+str(self.second_wt_mode)+"','"+self.second_wt_val+"','"+str(second_wt_date)+"','"+str(self.net_wt_val)+"','"+str(self.device_id)+"','"+str(self.login_user_id)+"','"+str(self.manual_ins_flg)+"','"+str(self.slot_no)+"/"+str(self.order_id)+"','"+str(self.quantity)+"','"+str(self.slot_no2)+"/"+str(self.order_id)+"','"+str(self.quantity2)+"','"+str(self.avg_bag_wt)+"' )")
                                                     connection.commit();
                                                     connection.close()
                                                 #self.reset_fun()
                                                 
                                                 self.update_slot(str(self.slot_no)+"/"+str(self.order_id),str(self.batch_id),str(self.materail_name),str(self.quantity),str(self.slot_1_wt),str(self.avg_bag_wt))                                            
                                                 if(self.checkBox.isChecked()):
                                                         print("Slot 2 upadated")
                                                         self.update_slot(str(self.slot_no2)+"/"+str(self.order_id),str(self.batch_id),str(self.materail_name),str(self.quantity2),str(self.slot_2_wt),str(self.avg_bag_wt))                                            
                                                 
                                                     
                                                     
                                                 self.label_56.setText("Successfully Loaded Second Weight.")
                                                 self.log_audit("Weighing","Loaded Second Weight. slip No:"+str(int(self.label_19.text())))
                                                 self.label_56.show()
                                                 self.load_1st_wt_vehicles()
                                                 self.load_2nd_wt_vehicles()
                                                 self.pushButton_5.setDisabled(True)
                                                 self.pushButton_8.setEnabled(True)
                                         
                                         
                                     else:
                                         self.label_56.setText("Error:Net Wt Should Not Zero.")
                                         self.label_56.show()
                                     
                                 else:
                                         self.label_56.setText("Error:Both Weights are of same Type.")
                                         self.label_56.show()
                                 
                                 
                                 
                                ### Update Statement
                                 
                                 
                                 
                                 
                         
                             else:
                                 self.label_56.setText("Weight FIRST /SECOND ?.")
                                 self.label_56.show()
                      else:
                             self.label_56.setText("Batch Id Should Not Empty.")
                             self.label_56.show()
                     
                                         
                 
        else:
                 self.label_56.setText("Vehical Number is empty.")
                 self.label_56.show() 
     
    def validation(self):
        self.goAhead="No"
        if(self.lineEdit_5.text()== ""):
                 self.label_56.setText("Actual Bags Should Not Empty.")
                 self.label_56.show()
        elif(int(self.lineEdit_5.text()) < 0):
                 self.label_56.setText("Actual Bags Should Greater Than 0.")
                 self.label_56.show()
        elif(self.avg_bag_wt > "51.5"):
                 self.label_56.setText("Please Check the Bags Count (Upper Limit Crossed).")
                 self.label_56.show()
        elif(self.avg_bag_wt < "45"):
                  self.label_56.setText("Please Check the Bags Count (Lower Limit Crossed).")
                  self.label_56.show()        
        elif(self.lineEdit_3.text()== ""):
                 self.label_56.setText("Slot ID 1 is empty.")
                 self.label_56.show()
        elif(self.lineEdit_6.text()== ""):
                  self.label_56.setText("Quantity 1 is empty.")
                  self.label_56.show()
        else:
                 if(self.checkBox.isChecked()):
                        self.goAhead="No"
                        if(self.lineEdit_4.text()== ""):
                                 self.label_56.setText("Slot ID 2 is empty.")
                                 self.label_56.show()
                        elif(self.lineEdit_4.text()== self.lineEdit_3.text()):
                                 self.label_56.setText("Both Slots should not same.")
                                 self.label_56.show()
                        elif(self.lineEdit_7.text()== ""):
                                  self.label_56.setText("Quantity 2 is empty.")
                                  self.label_56.show()
                        else:
                                  self.goAhead="Yes"
                 
                 else:
                         self.goAhead="Yes"
        
    def update_slot(self,slot_id,batch_id,material_name,no_of_bags,net_wt,avg_bag_wt):
        self.slot_exist_flg="No"
        ## check record exist
        connection = sqlite3.connect("fci.db")
        results=connection.execute("SELECT count(*) FROM SLOTS_MST WHERE SLOT_NO= '"+str(slot_id)+"'")       
        for x in results:
                   if(int(x[0]) == 1 ):
                       self.slot_exist_flg="Yes"
                   else:
                       self.slot_exist_flg="No" 
        connection.close()
        ##if yes then update
        if(self.slot_exist_flg=="Yes"):
            connection = sqlite3.connect("fci.db")
            with connection:                            
                    cursor = connection.cursor()
                    cursor.execute("UPDATE SLOTS_MST SET R_BAGS=R_BAGS+ '"+str(no_of_bags)+"',R_NET_WT=R_NET_WT+ '"+str(net_wt)+"',R_DATE=current_timestamp ,MATERIAL='"+str(material_name)+"',BATCH_ID='"+str(batch_id)+"',DEVICVE_ID='"+str(self.device_id)+"' where SLOT_NO= '"+str(slot_id)+"'")
                    cursor.execute("UPDATE SLOTS_MST SET R_AVG_BAG_WT=((R_NET_WT*1000)/R_BAGS) where SLOT_NO= '"+str(slot_id)+"'")
                    cursor.execute("UPDATE SLOTS_MST SET BAL_BAGS=R_BAGS-IFNULL(I_BAGS,0), BAL_NET_WT=R_NET_WT-IFNULL(I_NET_WT ,0)    where SLOT_NO= '"+str(slot_id)+"'")
                    
                    cursor.execute("UPDATE SLOTS_MST SET BAL_AVG_BAG_WT=((BAL_NET_WT*1000)/BAL_BAGS),storage_name ='"+str(self.stroagecombo.currentText())+"' where SLOT_NO= '"+str(slot_id)+"'")
                    
          
            connection.commit();
            connection.close()
            
        elif(self.slot_exist_flg=="No"):
            connection = sqlite3.connect("fci.db")
            with connection:                            
                    cursor = connection.cursor()
                    cursor.execute("INSERT INTO  SLOTS_MST(SLOT_NO,BATCH_ID,MATERIAL,R_BAGS,R_NET_WT,R_DATE,R_AVG_BAG_WT,BAL_BAGS,BAL_NET_WT,BAL_AVG_BAG_WT,DEVICVE_ID,storage_name) VALUES('"+str(slot_id)+"','"+str(batch_id)+"','"+str(material_name)+"','"+str(no_of_bags)+"','"+str(net_wt)+"',current_timestamp,'"+str(avg_bag_wt)+"','"+str(no_of_bags)+"','"+str(net_wt)+"','"+str(avg_bag_wt)+"','"+str(self.device_id)+"','"+str(self.stroagecombo.currentText())+"')")
                       
            connection.commit();
            connection.close()
            
        else:
              print("No action ")  
        ## No then INSERT 
        
    
    
    def log_audit(self,event_name,desc_str):        
        connection = sqlite3.connect("fci.db")
        with connection:        
            cursor = connection.cursor()       
            cursor.execute("INSERT INTO AUDIT_MST(AUDIT_TYPE,MESSAGE) VALUES(?,?)",(event_name,desc_str))
            cursor.execute("UPDATE AUDIT_MST SET USER_ID = (SELECT LOGIN_USER_ID FROM GLOBAL_VAR) WHERE USER_ID IS NULL")
            
        connection.commit();
        connection.close()
        


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = fci_03b_Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
